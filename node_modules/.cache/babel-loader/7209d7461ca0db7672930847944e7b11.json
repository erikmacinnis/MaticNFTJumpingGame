{"ast":null,"code":"var _jsxFileName = \"/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/App.js\",\n    _s = $RefreshSig$();\n\n// Todo \n// give the app a nice background and feel\n// Handle the block null value issue in Block file\n// Document the rest\n// change the alert and confirm buttons with https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n// test the game a little\n// put on GitHub and host it on web with https://fleek.co/\nimport React, { useEffect, useState, useRef } from 'react';\nimport Floor from './components/Floor.js';\nimport Block from './components/Block.js';\nimport TileFrame from './components/TileFrame.js';\nimport Score from './components/Score.js';\nimport NftPage from './components/NftPage.js';\nimport factory from './blockchain/factory.js';\nimport './css/stylesheet.css';\nimport { ethers } from 'ethers';\nimport Swal from 'sweetalert2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // connect button\n  const button = useRef(); // changing current NFT listener\n\n  const [nftChange, setNftChange] = useState(null);\n  const [nftPage, setNftPage] = useState(false);\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [worldHighScore, setWorldHighScore] = useState(0);\n  const [worldHighScoreHolder, setWorldHighScoreHolder] = useState(null);\n  const [ended, setEnded] = useState(true);\n  const [height, setHeight] = useState(100);\n  const [bottom, setBottom] = useState(false); // tile position of first tile of game\n\n  const [initialTilePos, setInitialTilePos] = useState(0); // tile position of next incoming tile\n\n  const [firstTilePos, setFirstTilePos] = useState(0);\n  const [gameContract, setGameContract] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [disconnected, setDisconnected] = useState(false); // reloads the game every new highscore\n\n  useEffect(() => {\n    if (score !== 0) {\n      loadGame();\n    }\n  }, [highScore]); // loads game at the start\n\n  useEffect(() => {\n    loadGame();\n  }, []);\n  useEffect(() => {\n    if (!ended) {\n      startGame();\n    }\n  }, [ended]);\n  useEffect(() => {\n    if (connected) {\n      button.current.innerHTML = \"Disconnect\";\n    } else {\n      button.current.innerHTML = \"Connect to MetaMask\";\n    }\n  }, [connected]);\n  useEffect(() => {\n    detectAccountChange();\n  }, []); // reloads game when a wallet disconnects, account changes, or chain changed\n\n  const detectAccountChange = () => {\n    window.ethereum.on(\"disconnect\", () => {\n      setDisconnected(true);\n      setConnected(false);\n      loadGame();\n    });\n    window.ethereum.on(\"accountsChanged\", () => {\n      setDisconnected(true);\n      setConnected(false);\n      loadGame();\n    });\n    window.ethereum.on(\"chainChanged\", () => {\n      loadGame();\n    });\n  };\n\n  const loadGame = async () => {\n    let signer;\n\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      console.log(\"Inside first\"); // A Web3Provider wraps a standard Web3 provider, which is\n      // what MetaMask injects as window.ethereum into each page\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      console.log(provider); // MetaMask requires requesting permission to connect users accounts\n\n      await provider.send(\"eth_requestAccounts\", []); // The MetaMask plugin also allows signing transactions to\n      // send ether and pay to change state within the blockchain.\n      // For this, you need the account signer...\n\n      signer = provider.getSigner();\n      console.log(\"Account signer:\", signer);\n      const chainId = 80001;\n\n      if (window.ethereum.networkVersion !== chainId) {\n        console.log(\"inside\");\n\n        try {\n          console.log(\"0x\" + chainId.toString(16));\n          await provider.send('wallet_switchEthereumChain', [{\n            chainId: \"0x\" + chainId.toString(16)\n          }]);\n        } catch (err) {\n          console.log(err.code);\n\n          if (err.code === 4902) {\n            console.log(\"0x\" + chainId.toString(16));\n            await provider.send('wallet_addEthereumChain', [{\n              chainName: 'Polygon Testnet Mumbai',\n              chainId: \"0x\" + chainId.toString(16),\n              nativeCurrency: {\n                name: 'tMATIC',\n                decimals: 18,\n                symbol: 'tMATIC'\n              },\n              rpcUrls: ['https://rpc-mumbai.maticvigil.com']\n            }]);\n          }\n        }\n      }\n\n      console.log(\"stage\");\n      console.log(window.ethereum.isConnected());\n      console.log(window.ethereum.networkVersion = 80001);\n\n      if (window.ethereum.isConnected() && window.ethereum.networkVersion === chainId) {\n        console.log(\"setting connected\");\n        setConnected(true);\n        setDisconnected(false);\n        const walletAddress = await signer.getAddress();\n        console.log(\"past\");\n        const ERC20_ABI = ['constructor()', 'function highScore() public view returns (uint256)', 'function mint(string memory tokenURI, uint256 tokenId) public returns (uint256)', 'function setNewHighScore(uint256 newHighScore) external', 'function ownerOf(uint256 tokenId) public view returns (address)'];\n        console.log(\"before\"); // checking if the wallet has created its own game smart contract\n\n        try {\n          if (!(await factory.isPlayedBefore(walletAddress))) {\n            // sets nft block to basic block\n            async function newGame() {\n              const tx = await factory.newJumpingGame();\n              tx.wait();\n              setTimeout(function () {\n                loadGame();\n              }, 30000);\n            }\n\n            console.log(\"played before\");\n            Swal.fire({\n              title: \"Would you like to create an account to keep track of your scores and NFTs?\",\n              showCancelButton: true,\n              confirmButtonText: \"Yup\"\n            }).then(result => {\n              if (result.isConfirmed) {\n                localStorage.setItem(\"current block\", 0);\n                console.log(\"before2\");\n                newGame();\n              } else {\n                setDisconnected(true);\n                setConnected(false);\n                setWorldHighScore(0);\n                setHighScore(0);\n                setWorldHighScoreHolder(\"\");\n                return;\n              }\n            }); // setting all aspects of smart contract to variables \n          } else {\n            const gameAddress = await factory.playersJumpingGameAddress(walletAddress);\n            const gameContract = new ethers.Contract(gameAddress, ERC20_ABI, signer);\n            setGameContract(gameContract);\n            const tempHighScore = await gameContract.highScore();\n            setHighScore(ethers.BigNumber.from(tempHighScore).toNumber());\n            console.log(\"tonumber\");\n            console.log(ethers.BigNumber.from(tempHighScore).toNumber());\n            const tempWorldHighScore = await factory.worldHighScore();\n            setWorldHighScore(ethers.BigNumber.from(tempWorldHighScore).toNumber());\n            const tempWorldHighScoreHolder = await factory.worldHighScoreHolder();\n            setWorldHighScoreHolder(ethers.BigNumber.from(tempWorldHighScoreHolder).toHexString());\n          }\n        } catch (err) {\n          if (err.code === 4001) {\n            setDisconnected(true);\n            setConnected(false);\n            setWorldHighScore(0);\n            setHighScore(0);\n            setWorldHighScoreHolder(\"\");\n            return;\n          }\n        }\n      } else {\n        // If you don't specify a //url//, Ethers connects to the default \n        // (i.e. ``http:/\\/localhost:8545``)\n        setDisconnected(true);\n        setConnected(false);\n        setWorldHighScore(0);\n        setHighScore(0);\n        setWorldHighScoreHolder(\"\");\n      }\n    } else {\n      Swal.fire({\n        title: 'You do not have MetaMask installed',\n        text: `Download MetaMask at https://metamask.io/download/`,\n        icon: 'info'\n      }); // If you don't specify a //url//, Ethers connects to the default \n      // (i.e. ``http:/\\/localhost:8545``)\n\n      setDisconnected(true);\n      setConnected(false);\n      setWorldHighScore(0);\n      setHighScore(0);\n      setWorldHighScoreHolder(\"\");\n    }\n  };\n\n  const startGame = async () => {\n    let countdown, textnode;\n    const timer1 = setTimeout(run, 1000);\n\n    function run() {\n      countdown = document.createElement(\"div\");\n      countdown.className = \"number\";\n      textnode = document.createTextNode(\"3\");\n      countdown.appendChild(textnode);\n      document.getElementById(\"container\").appendChild(countdown);\n      clearInterval(timer1);\n    }\n\n    const timer2 = setTimeout(run2, 2000);\n\n    function run2() {\n      textnode.nodeValue = \"2\";\n      clearInterval(timer2);\n    }\n\n    const timer3 = setTimeout(run3, 3000);\n\n    function run3() {\n      textnode.nodeValue = \"1\";\n      clearInterval(timer3);\n    }\n\n    const start = setTimeout(bot, 4000);\n\n    function bot() {\n      // triggers the start of the game in TileFram and Block pages\n      setBottom(true);\n      countdown.remove();\n      clearInterval(start);\n    }\n  };\n\n  const connectButton = async () => {\n    console.log(\"connected button\");\n    console.log(\"new\");\n    console.log(connected);\n    console.log(disconnected);\n\n    if (connected) {\n      setScore(0);\n      setDisconnected(true);\n      setConnected(false);\n      setDisconnected(true);\n      setConnected(false);\n      setWorldHighScore(0);\n      setHighScore(0);\n      setWorldHighScoreHolder(\"\");\n    } else {\n      loadGame();\n    }\n  }; // game page\n\n\n  if (!nftPage) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"background\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bigContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            ref: button,\n            className: \"ui inverted green button\",\n            onClick: e => connectButton(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"reminder\",\n            children: \"Remeber that a MetaMask transaction can take up to 30 seconds.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"faucet\",\n            children: [\"You can get your TMATIC tokens through this faucet\", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://faucet.polygon.technology/\",\n              children: \" HERE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ui container\",\n            id: \"container\",\n            children: [/*#__PURE__*/_jsxDEV(Score, {\n              connected: connected,\n              setHighScore: setHighScore,\n              setWorldHighScore: setWorldHighScore,\n              setWorldHighScoreHolder: setWorldHighScoreHolder,\n              gameContract: gameContract,\n              highScore: highScore,\n              worldHighScore: worldHighScore,\n              worldHighScoreHolder: worldHighScoreHolder,\n              setNftPage: setNftPage,\n              setScore: setScore,\n              setEnded: setEnded,\n              setHeight: setHeight,\n              setBottom: setBottom,\n              score: score,\n              ended: ended,\n              bottom: bottom\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Floor, {\n              setScore: setScore,\n              setHighScore: setHighScore,\n              setEnded: setEnded\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TileFrame, {\n              nftPage: nftPage,\n              bottom: bottom,\n              setInitialTilePos: setInitialTilePos,\n              setFirstTilePos: setFirstTilePos\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Block, {\n              nftChange: nftChange,\n              score: score,\n              setScore: setScore,\n              setEnded: setEnded,\n              height: height,\n              setHeight: setHeight,\n              bottom: bottom,\n              setBottom: setBottom,\n              initialTilePos: initialTilePos,\n              firstTilePos: firstTilePos\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 17\n      }, this)\n    }, void 0, false); // nft page\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"background\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bigContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reminder\",\n          children: \"Remeber that a MetaMask transaction can take up to 30 seconds.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ui container\",\n          style: {\n            backgroundColor: \"black\"\n          },\n          children: /*#__PURE__*/_jsxDEV(NftPage, {\n            gameContract: gameContract,\n            setNftPage: setNftPage,\n            highScore: highScore,\n            setNftChange: setNftChange,\n            nftChange: nftChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(App, \"wABArQPlcRdNQ925thISlwTe6bY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Floor","Block","TileFrame","Score","NftPage","factory","ethers","Swal","App","button","nftChange","setNftChange","nftPage","setNftPage","score","setScore","highScore","setHighScore","worldHighScore","setWorldHighScore","worldHighScoreHolder","setWorldHighScoreHolder","ended","setEnded","height","setHeight","bottom","setBottom","initialTilePos","setInitialTilePos","firstTilePos","setFirstTilePos","gameContract","setGameContract","connected","setConnected","disconnected","setDisconnected","loadGame","startGame","current","innerHTML","detectAccountChange","window","ethereum","on","signer","console","log","provider","providers","Web3Provider","send","getSigner","chainId","networkVersion","toString","err","code","chainName","nativeCurrency","name","decimals","symbol","rpcUrls","isConnected","walletAddress","getAddress","ERC20_ABI","isPlayedBefore","newGame","tx","newJumpingGame","wait","setTimeout","fire","title","showCancelButton","confirmButtonText","then","result","isConfirmed","localStorage","setItem","gameAddress","playersJumpingGameAddress","Contract","tempHighScore","BigNumber","from","toNumber","tempWorldHighScore","tempWorldHighScoreHolder","toHexString","text","icon","countdown","textnode","timer1","run","document","createElement","className","createTextNode","appendChild","getElementById","clearInterval","timer2","run2","nodeValue","timer3","run3","start","bot","remove","connectButton","e","backgroundColor"],"sources":["/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/App.js"],"sourcesContent":["// Todo \n// give the app a nice background and feel\n// Handle the block null value issue in Block file\n// Document the rest\n// change the alert and confirm buttons with https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n// test the game a little\n// put on GitHub and host it on web with https://fleek.co/\n\nimport React, {useEffect, useState, useRef} from 'react';\nimport Floor from './components/Floor.js';\nimport Block from './components/Block.js';\nimport TileFrame from './components/TileFrame.js';\nimport Score from './components/Score.js';\nimport NftPage from './components/NftPage.js';\nimport factory from './blockchain/factory.js';\nimport './css/stylesheet.css';\nimport { ethers } from 'ethers';\nimport Swal from 'sweetalert2';\n\nconst App = () => {\n\n    // connect button\n    const button = useRef();\n\n    // changing current NFT listener\n    const [nftChange, setNftChange] = useState(null);\n    const [nftPage, setNftPage] = useState(false);\n    const [score, setScore] = useState(0);\n    const [highScore, setHighScore] = useState(0);\n    const [worldHighScore, setWorldHighScore] = useState(0);\n    const [worldHighScoreHolder, setWorldHighScoreHolder] = useState(null);\n    const [ended, setEnded] = useState(true);\n    const [height, setHeight] = useState(100);\n    const [bottom, setBottom] = useState(false);\n    // tile position of first tile of game\n    const [initialTilePos, setInitialTilePos] = useState(0);\n    // tile position of next incoming tile\n    const [firstTilePos, setFirstTilePos] = useState(0);\n    const [gameContract, setGameContract] = useState(null);\n    const [connected, setConnected] = useState(false);\n    const [disconnected, setDisconnected] = useState(false);\n\n    // reloads the game every new highscore\n    useEffect( () => {\n        if (score !== 0) {\n            loadGame();\n        }\n    }, [highScore])\n\n    // loads game at the start\n    useEffect( () => {\n        loadGame();\n    }, [])\n\n    useEffect( () => {\n        if (!ended) {\n            startGame();\n        }\n    }, [ended]);\n\n    useEffect(() => {\n        if (connected){\n            button.current.innerHTML = \"Disconnect\";\n        }\n        else {\n            button.current.innerHTML = \"Connect to MetaMask\";\n        }\n    }, [connected])\n\n    useEffect(() => {\n        detectAccountChange();\n    }, [])\n\n    // reloads game when a wallet disconnects, account changes, or chain changed\n    const detectAccountChange = () => {\n        window.ethereum.on(\"disconnect\", () => {\n            setDisconnected(true);\n            setConnected(false);\n            loadGame();\n        })\n        window.ethereum.on(\"accountsChanged\", () => {\n            setDisconnected(true);\n            setConnected(false);\n            loadGame();\n          });\n\n        window.ethereum.on(\"chainChanged\", () => {\n            loadGame();\n        })\n    }\n\n    const loadGame = async() => {\n        let signer;\n        if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n            console.log(\"Inside first\");\n            // A Web3Provider wraps a standard Web3 provider, which is\n            // what MetaMask injects as window.ethereum into each page\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            console.log(provider);\n            // MetaMask requires requesting permission to connect users accounts\n            await provider.send(\"eth_requestAccounts\", []);\n\n            // The MetaMask plugin also allows signing transactions to\n            // send ether and pay to change state within the blockchain.\n            // For this, you need the account signer...\n            signer = provider.getSigner()\n\n            console.log(\"Account signer:\", signer);\n\n            const chainId = 80001;\n\n            if (window.ethereum.networkVersion !== chainId) {\n                console.log(\"inside\");\n                try {\n                    console.log(\"0x\" + chainId.toString(16));\n                    await provider.send('wallet_switchEthereumChain', [{chainId: \"0x\" + chainId.toString(16)}])\n                }\n                catch (err) {\n\n                    console.log(err.code);\n                    if (err.code === 4902) {\n                        console.log(\"0x\" + chainId.toString(16));\n                        await provider.send('wallet_addEthereumChain', [{chainName: 'Polygon Testnet Mumbai', chainId: \"0x\" + chainId.toString(16), nativeCurrency: { name: 'tMATIC', decimals: 18, symbol: 'tMATIC' }, rpcUrls: ['https://rpc-mumbai.maticvigil.com']}])\n                    } \n                }\n            }\n            console.log(\"stage\");\n            console.log(window.ethereum.isConnected());\n            console.log(window.ethereum.networkVersion = 80001);\n            if (window.ethereum.isConnected() && window.ethereum.networkVersion === chainId) {\n                \n                console.log(\"setting connected\");\n                setConnected(true);\n                setDisconnected(false);\n\n                const walletAddress = await signer.getAddress();\n                console.log(\"past\");\n                const ERC20_ABI = [\n                    'constructor()',\n                    'function highScore() public view returns (uint256)',\n                    'function mint(string memory tokenURI, uint256 tokenId) public returns (uint256)',\n                    'function setNewHighScore(uint256 newHighScore) external',\n                    'function ownerOf(uint256 tokenId) public view returns (address)'\n                ];\n\n                console.log(\"before\");\n                // checking if the wallet has created its own game smart contract\n                try {\n                    if (!(await factory.isPlayedBefore(walletAddress))){\n                        // sets nft block to basic block\n\n                        async function newGame() {\n                            const tx = await factory.newJumpingGame();\n                            tx.wait();\n                            setTimeout(function() {\n                                loadGame();\n                            }, 30000)\n                        }\n                        console.log(\"played before\");\n                        Swal.fire({\n                            title: \"Would you like to create an account to keep track of your scores and NFTs?\",\n                            showCancelButton: true,\n                            confirmButtonText: \"Yup\",\n                        }).then((result) => {\n                            if (result.isConfirmed) {\n                                localStorage.setItem(\"current block\", 0);\n                                console.log(\"before2\");\n                                newGame();\n                            }\n                            else {\n                                setDisconnected(true);\n                                setConnected(false);\n                                setWorldHighScore(0);\n                                setHighScore(0);\n                                setWorldHighScoreHolder(\"\"); \n                                return;\n                            }\n                        })\n                    // setting all aspects of smart contract to variables \n                    } else {\n                        const gameAddress = await factory.playersJumpingGameAddress(walletAddress);\n                        const gameContract = new ethers.Contract(gameAddress, ERC20_ABI, signer);\n                        setGameContract(gameContract);\n                        const tempHighScore = await gameContract.highScore();\n                        setHighScore(ethers.BigNumber.from(tempHighScore).toNumber());\n                        console.log(\"tonumber\");\n                        console.log(ethers.BigNumber.from(tempHighScore).toNumber())\n                        const tempWorldHighScore = await factory.worldHighScore();\n                        setWorldHighScore(ethers.BigNumber.from(tempWorldHighScore).toNumber());\n                        const tempWorldHighScoreHolder = await factory.worldHighScoreHolder()\n                        setWorldHighScoreHolder(ethers.BigNumber.from(tempWorldHighScoreHolder).toHexString());\n                        }\n                }\n                catch(err) {\n                    if (err.code === 4001){\n                        setDisconnected(true);\n                        setConnected(false);\n                        setWorldHighScore(0);\n                        setHighScore(0);\n                        setWorldHighScoreHolder(\"\"); \n                        return;\n                    }\n                }\n            }\n            else {\n                // If you don't specify a //url//, Ethers connects to the default \n                // (i.e. ``http:/\\/localhost:8545``)\n                setDisconnected(true);\n                setConnected(false);\n                setWorldHighScore(0);\n                setHighScore(0);\n                setWorldHighScoreHolder(\"\"); \n            }\n\n        } \n        else {\n            Swal.fire({\n                title: 'You do not have MetaMask installed',\n                text: `Download MetaMask at https://metamask.io/download/`,\n                icon: 'info',\n            })\n            // If you don't specify a //url//, Ethers connects to the default \n            // (i.e. ``http:/\\/localhost:8545``)\n            setDisconnected(true);\n            setConnected(false);\n            setWorldHighScore(0);\n            setHighScore(0);\n            setWorldHighScoreHolder(\"\"); \n        }\n    }\n\n    const startGame = async() => {\n\n        let countdown, textnode;\n        const timer1 = setTimeout( run, 1000);\n        function run() {\n            countdown = document.createElement(\"div\");\n            countdown.className = \"number\";\n            textnode = document.createTextNode(\"3\");\n            countdown.appendChild(textnode);\n            document.getElementById(\"container\").appendChild(countdown);\n            clearInterval(timer1);\n        }\n        const timer2 = setTimeout( run2, 2000);\n        function run2() {\n            textnode.nodeValue = \"2\";\n            clearInterval(timer2);\n        }\n        const timer3 = setTimeout( run3, 3000);\n        function run3() {\n            textnode.nodeValue = \"1\";\n            \n            clearInterval(timer3);\n        }\n        const start = setTimeout(bot, 4000);\n        function bot() {\n            // triggers the start of the game in TileFram and Block pages\n            setBottom(true);\n            countdown.remove();\n            clearInterval(start);\n        }\n    }\n\n    const connectButton = async() => {\n        console.log(\"connected button\");\n        console.log(\"new\");\n        console.log(connected);\n        console.log(disconnected);\n        if (connected) {\n            setScore(0);\n            setDisconnected(true);\n            setConnected(false);\n            setDisconnected(true);\n            setConnected(false);\n            setWorldHighScore(0);\n            setHighScore(0);\n            setWorldHighScoreHolder(\"\"); \n        }\n        else {\n            loadGame();\n        }\n    }\n\n    // game page\n    if (!nftPage) {\n        return (\n            <>\n                {/* <button className=\"ui green basic button\" onClick={}>\n\n                </button> */}\n                <div className=\"background\">\n                    <div className=\"bigContainer\">\n                        <button \n                                ref={button} \n                                className=\"ui inverted green button\" \n                                onClick={e => connectButton(e)}>\n                        </button>\n                        <div className=\"reminder\">\n                            Remeber that a MetaMask transaction can take up to 30 seconds.\n                        </div>\n                        <div className='faucet'>\n                            You can get your TMATIC tokens through this faucet \n                            <a href=\"https://faucet.polygon.technology/\"> HERE</a>\n                        </div>\n                        <div className=\"ui container\" id=\"container\">\n                            <Score connected={connected} setHighScore={setHighScore} setWorldHighScore={setWorldHighScore} setWorldHighScoreHolder={setWorldHighScoreHolder} gameContract={gameContract} highScore={highScore} worldHighScore={worldHighScore} worldHighScoreHolder={worldHighScoreHolder} setNftPage={setNftPage} setScore={setScore} setEnded={setEnded} setHeight={setHeight} setBottom={setBottom} score={score} ended={ended} bottom={bottom}/>\n                            <Floor setScore={setScore} setHighScore={setHighScore} setEnded={setEnded}/>\n                            <TileFrame nftPage={nftPage} bottom={bottom} setInitialTilePos={setInitialTilePos} setFirstTilePos={setFirstTilePos}/>\n                            <Block nftChange={nftChange} score={score} setScore={setScore} setEnded={setEnded} height={height} setHeight={setHeight} bottom={bottom} setBottom={setBottom} initialTilePos={initialTilePos} firstTilePos={firstTilePos}/>\n                        </div>\n                    </div>\n                </div>\n           </>\n        )\n        // nft page\n    } else {\n        return (\n            <div className=\"background\">\n                <div className=\"bigContainer\">\n                    <div className=\"reminder\">\n                            Remeber that a MetaMask transaction can take up to 30 seconds.\n                    </div>\n                    <div className=\"ui container\" style={{backgroundColor: \"black\"}}>\n                        <NftPage gameContract={gameContract} setNftPage={setNftPage} highScore={highScore} setNftChange={setNftChange} nftChange={nftChange}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    \n\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}