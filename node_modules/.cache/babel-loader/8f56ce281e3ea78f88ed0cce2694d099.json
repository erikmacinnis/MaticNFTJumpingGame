{"ast":null,"code":"var _jsxFileName = \"/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/App.js\",\n    _s = $RefreshSig$();\n\n// Todo \n// give the app a nice background and feel\n// Handle the block null value issue in Block file\n// Document the rest\n// change the alert and confirm buttons with https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n// test the game a little\n// put on GitHub and host it on web with https://fleek.co/\nimport React, { useEffect, useState } from 'react';\nimport Floor from './components/Floor.js';\nimport Block from './components/Block.js';\nimport TileFrame from './components/TileFrame.js';\nimport Score from './components/Score.js';\nimport NftPage from './components/NftPage.js';\nimport factory from './blockchain/factory.js';\nimport signer from './blockchain/ethers.js';\nimport './css/stylesheet.css';\nimport { ethers } from 'ethers';\nimport Swal from 'sweetalert2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // changing current NFT listener\n  const [nftChange, setNftChange] = useState(null);\n  const [nftPage, setNftPage] = useState(false);\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [worldHighScore, setWorldHighScore] = useState(0);\n  const [worldHighScoreHolder, setWorldHighScoreHolder] = useState(null);\n  const [ended, setEnded] = useState(true);\n  const [height, setHeight] = useState(100);\n  const [bottom, setBottom] = useState(false); // tile position of first tile of game\n\n  const [initialTilePos, setInitialTilePos] = useState(0); // tile position of next incoming tile\n\n  const [firstTilePos, setFirstTilePos] = useState(0);\n  const [gameContract, setGameContract] = useState(null);\n  const [connected, setConnected] = useState(false); // reloads the game every new high score to update score and at the start of the game\n\n  useEffect(() => {\n    loadGame();\n  }, [highScore]);\n  useEffect(() => {\n    if (!ended) {\n      startGame();\n    }\n  }, [ended]);\n  useEffect(async () => {\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      const provider = new ethers.providers.Web3Provider(window.ethereum); // MetaMask requires requesting permission to connect users accounts\n\n      const accounts = await provider.send(\"eth_accounts\", []);\n\n      if (accounts.length > 0) {\n        setConnected(true);\n      }\n    }\n  }, []);\n\n  const loadGame = async () => {\n    const walletAddress = await signer.getAddress();\n    const ERC20_ABI = ['constructor()', 'function highScore() public view returns (uint256)', 'function mint(string memory tokenURI, uint256 tokenId) public returns (uint256)', 'function setNewHighScore(uint256 newHighScore) external', 'function ownerOf(uint256 tokenId) public view returns (address)']; // checking if the wallet has created its own game smart contract\n\n    if (!(await factory.isPlayedBefore(walletAddress))) {\n      // sets nft block to basic block\n      localStorage.setItem(\"current block\", 0);\n      const tx = await factory.newJumpingGame();\n      tx.wait();\n      setGameContract(gameContract);\n    } // setting all aspects of smart contract to variables \n\n\n    const gameAddress = await factory.playersJumpingGameAddress(walletAddress);\n    const gameContract = new ethers.Contract(gameAddress, ERC20_ABI, signer);\n    console.log(gameAddress);\n    setGameContract(gameContract);\n    const tempHighScore = await gameContract.highScore();\n    setHighScore(ethers.BigNumber.from(tempHighScore).toNumber());\n    const tempWorldHighScore = await factory.worldHighScore();\n    setWorldHighScore(ethers.BigNumber.from(tempWorldHighScore).toNumber());\n    const tempWorldHighScoreHolder = await factory.worldHighScoreHolder();\n    setWorldHighScoreHolder(ethers.BigNumber.from(tempWorldHighScoreHolder).toHexString());\n  };\n\n  const startGame = async () => {\n    let countdown, textnode;\n    const timer1 = setTimeout(run, 1000);\n\n    function run() {\n      countdown = document.createElement(\"div\");\n      countdown.className = \"number\";\n      textnode = document.createTextNode(\"3\");\n      countdown.appendChild(textnode);\n      document.getElementById(\"container\").appendChild(countdown);\n      clearInterval(timer1);\n    }\n\n    const timer2 = setTimeout(run2, 2000);\n\n    function run2() {\n      textnode.nodeValue = \"2\";\n      clearInterval(timer2);\n    }\n\n    const timer3 = setTimeout(run3, 3000);\n\n    function run3() {\n      textnode.nodeValue = \"1\";\n      clearInterval(timer3);\n    }\n\n    const start = setTimeout(bot, 4000);\n\n    function bot() {\n      // triggers the start of the game in TileFram and Block pages\n      setBottom(true);\n      countdown.remove();\n      clearInterval(start);\n    }\n  };\n\n  const connectButton = e => {\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      // A Web3Provider wraps a standard Web3 provider, which is\n      // what MetaMask injects as window.ethereum into each page\n      const provider = new ethers.providers.Web3Provider(window.ethereum); // MetaMask requires requesting permission to connect users accounts\n\n      provider.send(\"eth_requestAccounts\", []);\n    } else {\n      Swal.fire({\n        title: 'You do not have MetaMask installed',\n        text: `Download MetaMask at https://metamask.io/download/`,\n        icon: 'info'\n      });\n    }\n  }; // game page\n\n\n  if (!nftPage) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"background\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => connectButton(e),\n            children: \"Connect to MetaMask\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ui container\",\n          id: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(Score, {\n            setHighScore: setHighScore,\n            setWorldHighScore: setWorldHighScore,\n            setWorldHighScoreHolder: setWorldHighScoreHolder,\n            gameContract: gameContract,\n            highScore: highScore,\n            worldHighScore: worldHighScore,\n            worldHighScoreHolder: worldHighScoreHolder,\n            setNftPage: setNftPage,\n            setScore: setScore,\n            setEnded: setEnded,\n            setHeight: setHeight,\n            setBottom: setBottom,\n            score: score,\n            ended: ended,\n            bottom: bottom\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Floor, {\n            setScore: setScore,\n            setHighScore: setHighScore,\n            setEnded: setEnded\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TileFrame, {\n            nftPage: nftPage,\n            bottom: bottom,\n            setInitialTilePos: setInitialTilePos,\n            setFirstTilePos: setFirstTilePos\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Block, {\n            nftChange: nftChange,\n            score: score,\n            setScore: setScore,\n            setEnded: setEnded,\n            height: height,\n            setHeight: setHeight,\n            bottom: bottom,\n            setBottom: setBottom,\n            initialTilePos: initialTilePos,\n            firstTilePos: firstTilePos\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this)\n    }, void 0, false); // nft page\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"background\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui container\",\n        style: {\n          backgroundColor: \"black\"\n        },\n        children: /*#__PURE__*/_jsxDEV(NftPage, {\n          gameContract: gameContract,\n          setNftPage: setNftPage,\n          highScore: highScore,\n          setNftChange: setNftChange,\n          nftChange: nftChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(App, \"7tMhgfDNfGvLf5arfNhePRzANFc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Floor","Block","TileFrame","Score","NftPage","factory","signer","ethers","Swal","App","nftChange","setNftChange","nftPage","setNftPage","score","setScore","highScore","setHighScore","worldHighScore","setWorldHighScore","worldHighScoreHolder","setWorldHighScoreHolder","ended","setEnded","height","setHeight","bottom","setBottom","initialTilePos","setInitialTilePos","firstTilePos","setFirstTilePos","gameContract","setGameContract","connected","setConnected","loadGame","startGame","window","ethereum","provider","providers","Web3Provider","accounts","send","length","walletAddress","getAddress","ERC20_ABI","isPlayedBefore","localStorage","setItem","tx","newJumpingGame","wait","gameAddress","playersJumpingGameAddress","Contract","console","log","tempHighScore","BigNumber","from","toNumber","tempWorldHighScore","tempWorldHighScoreHolder","toHexString","countdown","textnode","timer1","setTimeout","run","document","createElement","className","createTextNode","appendChild","getElementById","clearInterval","timer2","run2","nodeValue","timer3","run3","start","bot","remove","connectButton","e","fire","title","text","icon","backgroundColor"],"sources":["/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/App.js"],"sourcesContent":["// Todo \n// give the app a nice background and feel\n// Handle the block null value issue in Block file\n// Document the rest\n// change the alert and confirm buttons with https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n// test the game a little\n// put on GitHub and host it on web with https://fleek.co/\n\nimport React, {useEffect, useState} from 'react';\nimport Floor from './components/Floor.js';\nimport Block from './components/Block.js';\nimport TileFrame from './components/TileFrame.js';\nimport Score from './components/Score.js';\nimport NftPage from './components/NftPage.js';\nimport factory from './blockchain/factory.js';\nimport signer from './blockchain/ethers.js';\nimport './css/stylesheet.css';\nimport { ethers } from 'ethers';\nimport Swal from 'sweetalert2';\n\nconst App = () => {\n\n    // changing current NFT listener\n    const [nftChange, setNftChange] = useState(null);\n    const [nftPage, setNftPage] = useState(false);\n    const [score, setScore] = useState(0);\n    const [highScore, setHighScore] = useState(0);\n    const [worldHighScore, setWorldHighScore] = useState(0);\n    const [worldHighScoreHolder, setWorldHighScoreHolder] = useState(null);\n    const [ended, setEnded] = useState(true);\n    const [height, setHeight] = useState(100);\n    const [bottom, setBottom] = useState(false);\n    // tile position of first tile of game\n    const [initialTilePos, setInitialTilePos] = useState(0);\n    // tile position of next incoming tile\n    const [firstTilePos, setFirstTilePos] = useState(0);\n    const [gameContract, setGameContract] = useState(null);\n    const [connected, setConnected] = useState(false);\n\n    // reloads the game every new high score to update score and at the start of the game\n    useEffect( () => {\n        loadGame();\n    }, [highScore])\n\n    useEffect( () => {\n        if (!ended) {\n            startGame();\n        }\n    }, [ended]);\n\n    useEffect( async() => {\n        if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n        \n            // MetaMask requires requesting permission to connect users accounts\n            const accounts = await provider.send(\"eth_accounts\", []);\n\n            if (accounts.length > 0) {\n                setConnected(true);\n            }\n        } \n    }, [])\n    \n    const loadGame = async() => {\n        const walletAddress = await signer.getAddress();\n        const ERC20_ABI = [\n            'constructor()',\n            'function highScore() public view returns (uint256)',\n            'function mint(string memory tokenURI, uint256 tokenId) public returns (uint256)',\n            'function setNewHighScore(uint256 newHighScore) external',\n            'function ownerOf(uint256 tokenId) public view returns (address)'\n        ];\n        // checking if the wallet has created its own game smart contract\n        if (!(await factory.isPlayedBefore(walletAddress))){\n            // sets nft block to basic block\n            localStorage.setItem(\"current block\", 0);\n            const tx = await factory.newJumpingGame();\n            tx.wait();\n            setGameContract(gameContract);\n        }\n\n        // setting all aspects of smart contract to variables \n        const gameAddress = await factory.playersJumpingGameAddress(walletAddress);\n        const gameContract = new ethers.Contract(gameAddress, ERC20_ABI, signer);\n        console.log(gameAddress);\n        setGameContract(gameContract);\n        const tempHighScore = await gameContract.highScore();\n        setHighScore(ethers.BigNumber.from(tempHighScore).toNumber());\n        const tempWorldHighScore = await factory.worldHighScore();\n        setWorldHighScore(ethers.BigNumber.from(tempWorldHighScore).toNumber());\n        const tempWorldHighScoreHolder = await factory.worldHighScoreHolder()\n        setWorldHighScoreHolder(ethers.BigNumber.from(tempWorldHighScoreHolder).toHexString());\n    }\n\n    const startGame = async() => {\n\n        let countdown, textnode;\n        const timer1 = setTimeout( run, 1000);\n        function run() {\n            countdown = document.createElement(\"div\");\n            countdown.className = \"number\";\n            textnode = document.createTextNode(\"3\");\n            countdown.appendChild(textnode);\n            document.getElementById(\"container\").appendChild(countdown);\n            clearInterval(timer1);\n        }\n        const timer2 = setTimeout( run2, 2000);\n        function run2() {\n            textnode.nodeValue = \"2\";\n            clearInterval(timer2);\n        }\n        const timer3 = setTimeout( run3, 3000);\n        function run3() {\n            textnode.nodeValue = \"1\";\n            \n            clearInterval(timer3);\n        }\n        const start = setTimeout(bot, 4000);\n        function bot() {\n            // triggers the start of the game in TileFram and Block pages\n            setBottom(true);\n            countdown.remove();\n            clearInterval(start);\n        }\n    }\n\n    const connectButton = (e) => {\n        if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n            // A Web3Provider wraps a standard Web3 provider, which is\n            // what MetaMask injects as window.ethereum into each page\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n        \n            // MetaMask requires requesting permission to connect users accounts\n            provider.send(\"eth_requestAccounts\", []);\n        }\n        else {\n            Swal.fire({\n                title: 'You do not have MetaMask installed',\n                text: `Download MetaMask at https://metamask.io/download/`,\n                icon: 'info',\n            })\n        }\n    }\n\n    // game page\n    if (!nftPage) {\n        return (\n            <>\n                {/* <button className=\"ui green basic button\" onClick={}>\n\n                </button> */}\n                <div className=\"background\">\n                    <div className=\"button\"> \n                    <button onClick={e => connectButton(e)}>\n                        Connect to MetaMask\n                    </button>\n                    </div>\n                    <div className=\"ui container\" id=\"container\">\n                        <Score setHighScore={setHighScore} setWorldHighScore={setWorldHighScore} setWorldHighScoreHolder={setWorldHighScoreHolder} gameContract={gameContract} highScore={highScore} worldHighScore={worldHighScore} worldHighScoreHolder={worldHighScoreHolder} setNftPage={setNftPage} setScore={setScore} setEnded={setEnded} setHeight={setHeight} setBottom={setBottom} score={score} ended={ended} bottom={bottom}/>\n                        <Floor setScore={setScore} setHighScore={setHighScore} setEnded={setEnded}/>\n                        <TileFrame nftPage={nftPage} bottom={bottom} setInitialTilePos={setInitialTilePos} setFirstTilePos={setFirstTilePos}/>\n                        <Block nftChange={nftChange} score={score} setScore={setScore} setEnded={setEnded} height={height} setHeight={setHeight} bottom={bottom} setBottom={setBottom} initialTilePos={initialTilePos} firstTilePos={firstTilePos}/>\n                    </div>\n                </div>\n           </>\n        )\n        // nft page\n    } else {\n        return (\n            <div className=\"background\">\n                <div className=\"ui container\" style={{backgroundColor: \"black\"}}>\n                    <NftPage gameContract={gameContract} setNftPage={setNftPage} highScore={highScore} setNftChange={setNftChange} nftChange={nftChange}/>\n                </div>\n            </div>\n        )\n    }\n    \n\n};\n\nexport default App;"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAO,sBAAP;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;EAAA;;EAEd;EACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,IAAD,CAA1C;EACA,MAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,KAAD,CAAtC;EACA,MAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,CAAD,CAAlC;EACA,MAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,CAAD,CAA1C;EACA,MAAM,CAACmB,cAAD,EAAiBC,iBAAjB,IAAsCpB,QAAQ,CAAC,CAAD,CAApD;EACA,MAAM,CAACqB,oBAAD,EAAuBC,uBAAvB,IAAkDtB,QAAQ,CAAC,IAAD,CAAhE;EACA,MAAM,CAACuB,KAAD,EAAQC,QAAR,IAAoBxB,QAAQ,CAAC,IAAD,CAAlC;EACA,MAAM,CAACyB,MAAD,EAASC,SAAT,IAAsB1B,QAAQ,CAAC,GAAD,CAApC;EACA,MAAM,CAAC2B,MAAD,EAASC,SAAT,IAAsB5B,QAAQ,CAAC,KAAD,CAApC,CAXc,CAYd;;EACA,MAAM,CAAC6B,cAAD,EAAiBC,iBAAjB,IAAsC9B,QAAQ,CAAC,CAAD,CAApD,CAbc,CAcd;;EACA,MAAM,CAAC+B,YAAD,EAAeC,eAAf,IAAkChC,QAAQ,CAAC,CAAD,CAAhD;EACA,MAAM,CAACiC,YAAD,EAAeC,eAAf,IAAkClC,QAAQ,CAAC,IAAD,CAAhD;EACA,MAAM,CAACmC,SAAD,EAAYC,YAAZ,IAA4BpC,QAAQ,CAAC,KAAD,CAA1C,CAjBc,CAmBd;;EACAD,SAAS,CAAE,MAAM;IACbsC,QAAQ;EACX,CAFQ,EAEN,CAACpB,SAAD,CAFM,CAAT;EAIAlB,SAAS,CAAE,MAAM;IACb,IAAI,CAACwB,KAAL,EAAY;MACRe,SAAS;IACZ;EACJ,CAJQ,EAIN,CAACf,KAAD,CAJM,CAAT;EAMAxB,SAAS,CAAE,YAAW;IAClB,IAAI,OAAOwC,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACC,QAAd,KAA2B,WAAhE,EAA6E;MACzE,MAAMC,QAAQ,GAAG,IAAIjC,MAAM,CAACkC,SAAP,CAAiBC,YAArB,CAAkCJ,MAAM,CAACC,QAAzC,CAAjB,CADyE,CAGzE;;MACA,MAAMI,QAAQ,GAAG,MAAMH,QAAQ,CAACI,IAAT,CAAc,cAAd,EAA8B,EAA9B,CAAvB;;MAEA,IAAID,QAAQ,CAACE,MAAT,GAAkB,CAAtB,EAAyB;QACrBV,YAAY,CAAC,IAAD,CAAZ;MACH;IACJ;EACJ,CAXQ,EAWN,EAXM,CAAT;;EAaA,MAAMC,QAAQ,GAAG,YAAW;IACxB,MAAMU,aAAa,GAAG,MAAMxC,MAAM,CAACyC,UAAP,EAA5B;IACA,MAAMC,SAAS,GAAG,CACd,eADc,EAEd,oDAFc,EAGd,iFAHc,EAId,yDAJc,EAKd,iEALc,CAAlB,CAFwB,CASxB;;IACA,IAAI,EAAE,MAAM3C,OAAO,CAAC4C,cAAR,CAAuBH,aAAvB,CAAR,CAAJ,EAAmD;MAC/C;MACAI,YAAY,CAACC,OAAb,CAAqB,eAArB,EAAsC,CAAtC;MACA,MAAMC,EAAE,GAAG,MAAM/C,OAAO,CAACgD,cAAR,EAAjB;MACAD,EAAE,CAACE,IAAH;MACArB,eAAe,CAACD,YAAD,CAAf;IACH,CAhBuB,CAkBxB;;;IACA,MAAMuB,WAAW,GAAG,MAAMlD,OAAO,CAACmD,yBAAR,CAAkCV,aAAlC,CAA1B;IACA,MAAMd,YAAY,GAAG,IAAIzB,MAAM,CAACkD,QAAX,CAAoBF,WAApB,EAAiCP,SAAjC,EAA4C1C,MAA5C,CAArB;IACAoD,OAAO,CAACC,GAAR,CAAYJ,WAAZ;IACAtB,eAAe,CAACD,YAAD,CAAf;IACA,MAAM4B,aAAa,GAAG,MAAM5B,YAAY,CAAChB,SAAb,EAA5B;IACAC,YAAY,CAACV,MAAM,CAACsD,SAAP,CAAiBC,IAAjB,CAAsBF,aAAtB,EAAqCG,QAArC,EAAD,CAAZ;IACA,MAAMC,kBAAkB,GAAG,MAAM3D,OAAO,CAACa,cAAR,EAAjC;IACAC,iBAAiB,CAACZ,MAAM,CAACsD,SAAP,CAAiBC,IAAjB,CAAsBE,kBAAtB,EAA0CD,QAA1C,EAAD,CAAjB;IACA,MAAME,wBAAwB,GAAG,MAAM5D,OAAO,CAACe,oBAAR,EAAvC;IACAC,uBAAuB,CAACd,MAAM,CAACsD,SAAP,CAAiBC,IAAjB,CAAsBG,wBAAtB,EAAgDC,WAAhD,EAAD,CAAvB;EACH,CA7BD;;EA+BA,MAAM7B,SAAS,GAAG,YAAW;IAEzB,IAAI8B,SAAJ,EAAeC,QAAf;IACA,MAAMC,MAAM,GAAGC,UAAU,CAAEC,GAAF,EAAO,IAAP,CAAzB;;IACA,SAASA,GAAT,GAAe;MACXJ,SAAS,GAAGK,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAZ;MACAN,SAAS,CAACO,SAAV,GAAsB,QAAtB;MACAN,QAAQ,GAAGI,QAAQ,CAACG,cAAT,CAAwB,GAAxB,CAAX;MACAR,SAAS,CAACS,WAAV,CAAsBR,QAAtB;MACAI,QAAQ,CAACK,cAAT,CAAwB,WAAxB,EAAqCD,WAArC,CAAiDT,SAAjD;MACAW,aAAa,CAACT,MAAD,CAAb;IACH;;IACD,MAAMU,MAAM,GAAGT,UAAU,CAAEU,IAAF,EAAQ,IAAR,CAAzB;;IACA,SAASA,IAAT,GAAgB;MACZZ,QAAQ,CAACa,SAAT,GAAqB,GAArB;MACAH,aAAa,CAACC,MAAD,CAAb;IACH;;IACD,MAAMG,MAAM,GAAGZ,UAAU,CAAEa,IAAF,EAAQ,IAAR,CAAzB;;IACA,SAASA,IAAT,GAAgB;MACZf,QAAQ,CAACa,SAAT,GAAqB,GAArB;MAEAH,aAAa,CAACI,MAAD,CAAb;IACH;;IACD,MAAME,KAAK,GAAGd,UAAU,CAACe,GAAD,EAAM,IAAN,CAAxB;;IACA,SAASA,GAAT,GAAe;MACX;MACA1D,SAAS,CAAC,IAAD,CAAT;MACAwC,SAAS,CAACmB,MAAV;MACAR,aAAa,CAACM,KAAD,CAAb;IACH;EACJ,CA9BD;;EAgCA,MAAMG,aAAa,GAAIC,CAAD,IAAO;IACzB,IAAI,OAAOlD,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACC,QAAd,KAA2B,WAAhE,EAA6E;MACzE;MACA;MACA,MAAMC,QAAQ,GAAG,IAAIjC,MAAM,CAACkC,SAAP,CAAiBC,YAArB,CAAkCJ,MAAM,CAACC,QAAzC,CAAjB,CAHyE,CAKzE;;MACAC,QAAQ,CAACI,IAAT,CAAc,qBAAd,EAAqC,EAArC;IACH,CAPD,MAQK;MACDpC,IAAI,CAACiF,IAAL,CAAU;QACNC,KAAK,EAAE,oCADD;QAENC,IAAI,EAAG,oDAFD;QAGNC,IAAI,EAAE;MAHA,CAAV;IAKH;EACJ,CAhBD,CA1Gc,CA4Hd;;;EACA,IAAI,CAAChF,OAAL,EAAc;IACV,oBACI;MAAA,uBAII;QAAK,SAAS,EAAC,YAAf;QAAA,wBACI;UAAK,SAAS,EAAC,QAAf;UAAA,uBACA;YAAQ,OAAO,EAAE4E,CAAC,IAAID,aAAa,CAACC,CAAD,CAAnC;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QADA;UAAA;UAAA;UAAA;QAAA,QADJ,eAMI;UAAK,SAAS,EAAC,cAAf;UAA8B,EAAE,EAAC,WAAjC;UAAA,wBACI,QAAC,KAAD;YAAO,YAAY,EAAEvE,YAArB;YAAmC,iBAAiB,EAAEE,iBAAtD;YAAyE,uBAAuB,EAAEE,uBAAlG;YAA2H,YAAY,EAAEW,YAAzI;YAAuJ,SAAS,EAAEhB,SAAlK;YAA6K,cAAc,EAAEE,cAA7L;YAA6M,oBAAoB,EAAEE,oBAAnO;YAAyP,UAAU,EAAEP,UAArQ;YAAiR,QAAQ,EAAEE,QAA3R;YAAqS,QAAQ,EAAEQ,QAA/S;YAAyT,SAAS,EAAEE,SAApU;YAA+U,SAAS,EAAEE,SAA1V;YAAqW,KAAK,EAAEb,KAA5W;YAAmX,KAAK,EAAEQ,KAA1X;YAAiY,MAAM,EAAEI;UAAzY;YAAA;YAAA;YAAA;UAAA,QADJ,eAEI,QAAC,KAAD;YAAO,QAAQ,EAAEX,QAAjB;YAA2B,YAAY,EAAEE,YAAzC;YAAuD,QAAQ,EAAEM;UAAjE;YAAA;YAAA;YAAA;UAAA,QAFJ,eAGI,QAAC,SAAD;YAAW,OAAO,EAAEX,OAApB;YAA6B,MAAM,EAAEc,MAArC;YAA6C,iBAAiB,EAAEG,iBAAhE;YAAmF,eAAe,EAAEE;UAApG;YAAA;YAAA;YAAA;UAAA,QAHJ,eAII,QAAC,KAAD;YAAO,SAAS,EAAErB,SAAlB;YAA6B,KAAK,EAAEI,KAApC;YAA2C,QAAQ,EAAEC,QAArD;YAA+D,QAAQ,EAAEQ,QAAzE;YAAmF,MAAM,EAAEC,MAA3F;YAAmG,SAAS,EAAEC,SAA9G;YAAyH,MAAM,EAAEC,MAAjI;YAAyI,SAAS,EAAEC,SAApJ;YAA+J,cAAc,EAAEC,cAA/K;YAA+L,YAAY,EAAEE;UAA7M;YAAA;YAAA;YAAA;UAAA,QAJJ;QAAA;UAAA;UAAA;UAAA;QAAA,QANJ;MAAA;QAAA;QAAA;QAAA;MAAA;IAJJ,iBADJ,CADU,CAqBV;EACH,CAtBD,MAsBO;IACH,oBACI;MAAK,SAAS,EAAC,YAAf;MAAA,uBACI;QAAK,SAAS,EAAC,cAAf;QAA8B,KAAK,EAAE;UAAC+D,eAAe,EAAE;QAAlB,CAArC;QAAA,uBACI,QAAC,OAAD;UAAS,YAAY,EAAE7D,YAAvB;UAAqC,UAAU,EAAEnB,UAAjD;UAA6D,SAAS,EAAEG,SAAxE;UAAmF,YAAY,EAAEL,YAAjG;UAA+G,SAAS,EAAED;QAA1H;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QADJ;EAOH;AAGJ,CA9JD;;GAAMD,G;;KAAAA,G;AAgKN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}