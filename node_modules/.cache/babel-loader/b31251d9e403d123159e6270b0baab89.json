{"ast":null,"code":"import { ethers } from \"ethers\";\nlet signer;\nconsole.log(\"hello\");\n\nif (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n  // A Web3Provider wraps a standard Web3 provider, which is\n  // what MetaMask injects as window.ethereum into each page\n  console.log(\"first if statement\");\n  const provider = new ethers.providers.Web3Provider(window.ethereum); // MetaMask requires requesting permission to connect users accounts\n\n  provider.send(\"eth_requestAccounts\", []); // The MetaMask plugin also allows signing transactions to\n  // send ether and pay to change state within the blockchain.\n  // For this, you need the account signer...\n\n  signer = provider.getSigner();\n  console.log(\"Account address s:\", signer.getAddress());\n} else {\n  // If you don't specify a //url//, Ethers connects to the default \n  // (i.e. ``http:/\\/localhost:8545``)\n  const provider = new ethers.providers.JsonRpcProvider(\"https://speedy-nodes-nyc.moralis.io/00d2c7794a08b46d3079567b/polygon/mumbai\"); // // The provider also allows signing transactions to\n  // // send ether and pay to change state within the blockchain.\n  // // For this, we need the account signer...\n\n  signer = provider.getSigner();\n  console.log(\"Account address:\", signer);\n}\n\nexport default signer;","map":{"version":3,"names":["ethers","signer","console","log","window","ethereum","provider","providers","Web3Provider","send","getSigner","getAddress","JsonRpcProvider"],"sources":["/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/blockchain/ethers.js"],"sourcesContent":["import { ethers } from \"ethers\";\n\nlet signer;\nconsole.log(\"hello\")\n\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n        // A Web3Provider wraps a standard Web3 provider, which is\n        // what MetaMask injects as window.ethereum into each page\n        console.log(\"first if statement\")\n        const provider = new ethers.providers.Web3Provider(window.ethereum)\n\n        // MetaMask requires requesting permission to connect users accounts\n        provider.send(\"eth_requestAccounts\", []);\n\n        // The MetaMask plugin also allows signing transactions to\n        // send ether and pay to change state within the blockchain.\n        // For this, you need the account signer...\n        signer = provider.getSigner()\n\n        console.log(\"Account address s:\", signer.getAddress());\n    } else {\n        // If you don't specify a //url//, Ethers connects to the default \n        // (i.e. ``http:/\\/localhost:8545``)\n        const provider = new ethers.providers.JsonRpcProvider(\"https://speedy-nodes-nyc.moralis.io/00d2c7794a08b46d3079567b/polygon/mumbai\");\n\n        // // The provider also allows signing transactions to\n        // // send ether and pay to change state within the blockchain.\n        // // For this, we need the account signer...\n        signer = provider.getSigner()\n\n        console.log(\"Account address:\", signer);\n    }\n\n\nexport default signer;\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,IAAIC,MAAJ;AACAC,OAAO,CAACC,GAAR,CAAY,OAAZ;;AAEI,IAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACC,QAAd,KAA2B,WAAhE,EAA6E;EACzE;EACA;EACAH,OAAO,CAACC,GAAR,CAAY,oBAAZ;EACA,MAAMG,QAAQ,GAAG,IAAIN,MAAM,CAACO,SAAP,CAAiBC,YAArB,CAAkCJ,MAAM,CAACC,QAAzC,CAAjB,CAJyE,CAMzE;;EACAC,QAAQ,CAACG,IAAT,CAAc,qBAAd,EAAqC,EAArC,EAPyE,CASzE;EACA;EACA;;EACAR,MAAM,GAAGK,QAAQ,CAACI,SAAT,EAAT;EAEAR,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,MAAM,CAACU,UAAP,EAAlC;AACH,CAfD,MAeO;EACH;EACA;EACA,MAAML,QAAQ,GAAG,IAAIN,MAAM,CAACO,SAAP,CAAiBK,eAArB,CAAqC,6EAArC,CAAjB,CAHG,CAKH;EACA;EACA;;EACAX,MAAM,GAAGK,QAAQ,CAACI,SAAT,EAAT;EAEAR,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,MAAhC;AACH;;AAGL,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}