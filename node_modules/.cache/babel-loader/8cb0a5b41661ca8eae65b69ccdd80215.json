{"ast":null,"code":"import { ethers } from \"ethers\";\nlet signer;\nconsole.log(\"hello\");\n\nconst fn = async () => {\n  if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n    // A Web3Provider wraps a standard Web3 provider, which is\n    // what MetaMask injects as window.ethereum into each page\n    const provider = new ethers.providers.Web3Provider(window.ethereum); // MetaMask requires requesting permission to connect users accounts\n\n    await provider.send(\"eth_requestAccounts\", []); // The MetaMask plugin also allows signing transactions to\n    // send ether and pay to change state within the blockchain.\n    // For this, you need the account signer...\n\n    signer = provider.getSigner();\n    console.log(\"Account address s:\", await signer.getAddress());\n  } else {\n    // If you don't specify a //url//, Ethers connects to the default \n    // (i.e. ``http:/\\/localhost:8545``)\n    const provider = new ethers.providers.JsonRpcProvider(\"https://speedy-nodes-nyc.moralis.io/00d2c7794a08b46d3079567b/polygon/mumbai\"); // // The provider also allows signing transactions to\n    // // send ether and pay to change state within the blockchain.\n    // // For this, we need the account signer...\n\n    signer = await provider.getSigner();\n    console.log(\"Account address:\", signer);\n  }\n};\n\nfn();\nexport default signer;","map":{"version":3,"names":["ethers","signer","console","log","fn","window","ethereum","provider","providers","Web3Provider","send","getSigner","getAddress","JsonRpcProvider"],"sources":["/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/blockchain/ethers.js"],"sourcesContent":["import { ethers } from \"ethers\";\n\nlet signer;\nconsole.log(\"hello\")\nconst fn = async() => {\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n        // A Web3Provider wraps a standard Web3 provider, which is\n        // what MetaMask injects as window.ethereum into each page\n        const provider = new ethers.providers.Web3Provider(window.ethereum)\n\n        // MetaMask requires requesting permission to connect users accounts\n        await provider.send(\"eth_requestAccounts\", []);\n\n        // The MetaMask plugin also allows signing transactions to\n        // send ether and pay to change state within the blockchain.\n        // For this, you need the account signer...\n        signer = provider.getSigner()\n\n        console.log(\"Account address s:\", await signer.getAddress());\n    } else {\n        // If you don't specify a //url//, Ethers connects to the default \n        // (i.e. ``http:/\\/localhost:8545``)\n        const provider = new ethers.providers.JsonRpcProvider(\"https://speedy-nodes-nyc.moralis.io/00d2c7794a08b46d3079567b/polygon/mumbai\");\n\n        // // The provider also allows signing transactions to\n        // // send ether and pay to change state within the blockchain.\n        // // For this, we need the account signer...\n        signer = await provider.getSigner()\n\n        console.log(\"Account address:\", signer);\n    }\n}\n\nfn();\n\nexport default signer;\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,IAAIC,MAAJ;AACAC,OAAO,CAACC,GAAR,CAAY,OAAZ;;AACA,MAAMC,EAAE,GAAG,YAAW;EAClB,IAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACC,QAAd,KAA2B,WAAhE,EAA6E;IACzE;IACA;IACA,MAAMC,QAAQ,GAAG,IAAIP,MAAM,CAACQ,SAAP,CAAiBC,YAArB,CAAkCJ,MAAM,CAACC,QAAzC,CAAjB,CAHyE,CAKzE;;IACA,MAAMC,QAAQ,CAACG,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAN,CANyE,CAQzE;IACA;IACA;;IACAT,MAAM,GAAGM,QAAQ,CAACI,SAAT,EAAT;IAEAT,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkC,MAAMF,MAAM,CAACW,UAAP,EAAxC;EACH,CAdD,MAcO;IACH;IACA;IACA,MAAML,QAAQ,GAAG,IAAIP,MAAM,CAACQ,SAAP,CAAiBK,eAArB,CAAqC,6EAArC,CAAjB,CAHG,CAKH;IACA;IACA;;IACAZ,MAAM,GAAG,MAAMM,QAAQ,CAACI,SAAT,EAAf;IAEAT,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,MAAhC;EACH;AACJ,CA3BD;;AA6BAG,EAAE;AAEF,eAAeH,MAAf"},"metadata":{},"sourceType":"module"}