[{"/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/index.js":"1","/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/App.js":"2","/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/components/Block.js":"3","/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/components/TileFrame.js":"4","/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/components/Tile.js":"5","/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/components/Score.js":"6","/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/components/NftPage.js":"7","/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/blockchain/factory.js":"8","/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/blockchain/ethers.js":"9"},{"size":148,"mtime":1654515402909,"results":"10","hashOfConfig":"11"},{"size":12809,"mtime":1657321184283,"results":"12","hashOfConfig":"11"},{"size":6739,"mtime":1657319707074,"results":"13","hashOfConfig":"11"},{"size":2513,"mtime":1657320725439,"results":"14","hashOfConfig":"11"},{"size":1598,"mtime":1657320713188,"results":"15","hashOfConfig":"11"},{"size":7698,"mtime":1657320534960,"results":"16","hashOfConfig":"11"},{"size":10989,"mtime":1657320147630,"results":"17","hashOfConfig":"11"},{"size":631,"mtime":1657151147220,"results":"18","hashOfConfig":"11"},{"size":1199,"mtime":1657151151191,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zptxy0",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"31"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"31"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"31"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/index.js",[],[],"/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/App.js",["54","55","56","57"],[],"// Todo \n// give the app a nice background and feel\n// Handle the block null value issue in Block file\n// Document the rest\n// change the alert and confirm buttons with https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n// test the game a little\n// put on GitHub and host it on web with https://fleek.co/\n\nimport React, {useEffect, useState, useRef} from 'react';\nimport Block from './components/Block.js';\nimport TileFrame from './components/TileFrame.js';\nimport Score from './components/Score.js';\nimport NftPage from './components/NftPage.js';\nimport factory from './blockchain/factory.js';\nimport './css/stylesheet.css';\nimport { ethers } from 'ethers';\nimport Swal from 'sweetalert2';\n\nconst App = () => {\n\n    // connect button\n    const button = useRef();\n\n    // changing current NFT listener\n    const [nftChange, setNftChange] = useState(null);\n    const [nftPage, setNftPage] = useState(false);\n    const [score, setScore] = useState(0);\n    const [highScore, setHighScore] = useState(0);\n    const [worldHighScore, setWorldHighScore] = useState(0);\n    const [worldHighScoreHolder, setWorldHighScoreHolder] = useState(null);\n    const [ended, setEnded] = useState(true);\n    const [height, setHeight] = useState(100);\n    const [bottom, setBottom] = useState(false);\n    // tile position of first tile of game\n    const [initialTilePos, setInitialTilePos] = useState(0);\n    // tile position of next incoming tile\n    const [firstTilePos, setFirstTilePos] = useState(0);\n    const [gameContract, setGameContract] = useState(null);\n    const [connected, setConnected] = useState(false);\n\n    // reloads the game every new highscore\n    useEffect( () => {\n        if (score !== 0) {\n            loadGame();\n        }\n    }, [highScore])\n\n    // loads game at the start\n    useEffect( () => {\n        loadGame();\n    }, [])\n\n    useEffect( () => {\n        if (!ended) {\n            startGame();\n        }\n    }, [ended]);\n\n    useEffect(() => {\n        if (connected){\n            button.current.innerHTML = \"Disconnect\";\n        }\n        else {\n            button.current.innerHTML = \"Connect to MetaMask\";\n        }\n    }, [connected])\n\n    useEffect(() => {\n        detectAccountChange();\n    }, [])\n\n    // reloads game when a wallet disconnects, account changes, or chain changed\n    const detectAccountChange = () => {\n        window.ethereum.on(\"disconnect\", () => {\n            setConnected(false);\n            loadGame();\n        })\n        window.ethereum.on(\"accountsChanged\", () => {\n            setConnected(false);\n            loadGame();\n          });\n\n        window.ethereum.on(\"chainChanged\", () => {\n            loadGame();\n        })\n    }\n\n    const loadGame = async() => {\n        if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n            let signer;\n            // A Web3Provider wraps a standard Web3 provider, which is\n            // what MetaMask injects as window.ethereum into each page\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n\n            // MetaMask requires requesting permission to connect users accounts\n            await provider.send(\"eth_requestAccounts\", []);\n\n            // The MetaMask plugin also allows signing transactions to\n            // send ether and pay to change state within the blockchain.\n            // For this, you need the account signer...\n            signer = provider.getSigner()\n\n            const chainId = 80001;\n            // Connecting the user to the Mumbai chain if they are not already connected\n            if (window.ethereum.networkVersion !== chainId) {\n                try {\n                    await provider.send('wallet_switchEthereumChain', [{chainId: \"0x\" + chainId.toString(16)}])\n                }\n                catch (err) {\n                    if (err.code === 4902) {\n                        await provider.send('wallet_addEthereumChain', [{chainName: 'Polygon Testnet Mumbai', chainId: \"0x\" + chainId.toString(16), nativeCurrency: { name: 'tMATIC', decimals: 18, symbol: 'tMATIC' }, rpcUrls: ['https://rpc-mumbai.maticvigil.com']}])\n                    } \n                }\n            }\n            if (window.ethereum.isConnected() && window.ethereum.networkVersion == chainId) {\n                const walletAddress = await signer.getAddress();\n                const ERC20_ABI = [\n                    'constructor()',\n                    'function highScore() public view returns (uint256)',\n                    'function mint(string memory tokenURI, uint256 tokenId) public returns (uint256)',\n                    'function setNewHighScore(uint256 newHighScore) external',\n                    'function ownerOf(uint256 tokenId) public view returns (address)'\n                ];\n\n                try {\n                    // checking if the wallet has created its own game smart contract\n                    if (!(await factory.isPlayedBefore(walletAddress))){\n                        // sets nft block to basic block\n\n                        // Creates account for new user then loads the game again \n                        // On the next reload the user will now have an account\n                        async function newGame() {\n                            const tx = await factory.newJumpingGame();\n                            tx.wait();\n                            setTimeout(function() {\n                                loadGame();\n                            }, 20000)\n                        }\n                        Swal.fire({\n                            title: \"Would you like to create an account to keep track of your scores and NFTs?\",\n                            showCancelButton: true,\n                            confirmButtonText: \"Yup\",\n                        }).then((result) => {\n                            if (result.isConfirmed) {\n                                localStorage.setItem(\"current block\", 0);\n                                newGame();\n                            }\n                            else {\n                                // sets default functionality\n                                setConnected(false);\n                                setWorldHighScore(0);\n                                setHighScore(0);\n                                setWorldHighScoreHolder(\"\"); \n                                return;\n                            }\n                        })\n                    } else {\n                        // setting all aspects of smart contract to variables \n                        setConnected(true);\n                        const gameAddress = await factory.playersJumpingGameAddress(walletAddress);\n                        const gameContract = new ethers.Contract(gameAddress, ERC20_ABI, signer);\n                        setGameContract(gameContract);\n                        const tempHighScore = await gameContract.highScore();\n                        setHighScore(ethers.BigNumber.from(tempHighScore).toNumber());\n                        const tempWorldHighScore = await factory.worldHighScore();\n                        setWorldHighScore(ethers.BigNumber.from(tempWorldHighScore).toNumber());\n                        const tempWorldHighScoreHolder = await factory.worldHighScoreHolder()\n                        setWorldHighScoreHolder(ethers.BigNumber.from(tempWorldHighScoreHolder).toHexString());\n                        }\n                }\n                catch(err) {\n                    setConnected(false);\n                    setWorldHighScore(0);\n                    setHighScore(0);\n                    setWorldHighScoreHolder(\"\"); \n                    return;\n                    }\n            }\n            else {\n                setConnected(false);\n                setWorldHighScore(0);\n                setHighScore(0);\n                setWorldHighScoreHolder(\"\"); \n            }\n\n        } \n        else {\n            Swal.fire({\n                title: 'You do not have MetaMask installed',\n                text: `Download MetaMask at https://metamask.io/download/`,\n                icon: 'info',\n            })\n            // If you don't specify a //url//, Ethers connects to the default \n            // (i.e. ``http:/\\/localhost:8545``)\n            setConnected(false);\n            setWorldHighScore(0);\n            setHighScore(0);\n            setWorldHighScoreHolder(\"\"); \n        }\n    }\n\n    const startGame = async() => {\n\n        // Creates a countdown then starts the game\n        let countdown, textnode;\n        const timer1 = setTimeout( run, 1000);\n        function run() {\n            countdown = document.createElement(\"div\");\n            countdown.className = \"number\";\n            textnode = document.createTextNode(\"3\");\n            countdown.appendChild(textnode);\n            document.getElementById(\"container\").appendChild(countdown);\n            clearInterval(timer1);\n        }\n        const timer2 = setTimeout( run2, 2000);\n        function run2() {\n            textnode.nodeValue = \"2\";\n            clearInterval(timer2);\n        }\n        const timer3 = setTimeout( run3, 3000);\n        function run3() {\n            textnode.nodeValue = \"1\";\n            \n            clearInterval(timer3);\n        }\n        const start = setTimeout(bot, 4000);\n        function bot() {\n            // triggers the start of the game in TileFram and Block pages\n            setBottom(true);\n            countdown.remove();\n            clearInterval(start);\n        }\n    }\n\n    // Action for the on click button\n    const connectButton = async() => {\n        if (connected) {\n            setScore(0);\n            setConnected(false);\n            setWorldHighScore(0);\n            setHighScore(0);\n            setWorldHighScoreHolder(\"\"); \n        }\n        else {\n            loadGame();\n        }\n    }\n\n    // game page\n    if (!nftPage) {\n        return (\n            <>\n                <div className=\"background\">\n                    <div className=\"bigContainer\">\n                        <button \n                                ref={button} \n                                className=\"ui inverted green button\" \n                                onClick={e => connectButton(e)}>\n                        </button>\n                        <div className=\"reminder\">\n                            Remember that a MetaMask transaction can take up to 30 seconds\n                        </div>\n                        <div className='faucet'>\n                            You can get your TMATIC tokens through this faucet \n                            <a href=\"https://faucet.polygon.technology/\"> HERE</a>\n                        </div>\n                        <div className='testnet'>\n                            Check out the leader on the Mumbai explorer \n                            <a href=\"https://mumbai.polygonscan.com/\"> HERE</a>\n                        </div>\n                        <div className=\"ui container\" id=\"container\">\n                            <Score connected={connected} setHighScore={setHighScore} setWorldHighScore={setWorldHighScore} setWorldHighScoreHolder={setWorldHighScoreHolder} gameContract={gameContract} highScore={highScore} worldHighScore={worldHighScore} worldHighScoreHolder={worldHighScoreHolder} setNftPage={setNftPage} setScore={setScore} setEnded={setEnded} setHeight={setHeight} setBottom={setBottom} score={score} ended={ended} bottom={bottom}/>\n                            <div className=\"floor\"></div>\n                            <TileFrame nftPage={nftPage} bottom={bottom} setInitialTilePos={setInitialTilePos} setFirstTilePos={setFirstTilePos}/>\n                            <Block nftChange={nftChange} score={score} setScore={setScore} setEnded={setEnded} height={height} setHeight={setHeight} bottom={bottom} setBottom={setBottom} initialTilePos={initialTilePos} firstTilePos={firstTilePos}/>\n                        </div>\n                    </div>\n                </div>\n           </>\n        )\n\n        // nft page\n    } else {\n        return (\n            <div className=\"background\">\n                <div className=\"bigContainer\">\n                    <div className=\"reminder\">\n                            Minting an NFT may take up to 30 seconds\n                    </div>\n                    <div className='faucet'>\n                            You can trade your NFTs on  \n                            <a href=\"https://testnets.opensea.io/\"> Opensea!</a>\n                        </div>\n                    <div className=\"ui container\" style={{backgroundColor: \"black\"}}>\n                        <NftPage gameContract={gameContract} setNftPage={setNftPage} highScore={highScore} setNftChange={setNftChange} nftChange={nftChange}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    \n\n};\n\nexport default App;","/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/components/Block.js",["58","59","60","61"],[],"import React, {useEffect, useRef, useState} from 'react';\nimport '../css/stylesheet.css';\nimport preset from '../MetaData/Images/unsplashImage.jpg';\nimport A from '../MetaData/Images/1.png';\nimport B from '../MetaData/Images/2.png';\nimport C from '../MetaData/Images/3.png';\nimport D from '../MetaData/Images/4.png';\nimport E from '../MetaData/Images/5.png';\nimport F from '../MetaData/Images/6.png';\nimport G from '../MetaData/Images/7.png';\nimport H from '../MetaData/Images/8.png';\nimport I from '../MetaData/Images/9.png';\nimport J from '../MetaData/Images/10.png';\nimport K from '../MetaData/Images/11.png';\nimport L from '../MetaData/Images/12.png';\nimport M from '../MetaData/Images/13.png';\nimport N from '../MetaData/Images/14.png';\nimport O from '../MetaData/Images/15.gif';\n\nconst Block = ({nftChange, setScore, score, setEnded, height, setHeight, bottom, setBottom, initialTilePos, firstTilePos}) => {\n\n    const blockRef = useRef();\n    let newImage;\n    let pixelHeight = height + \"px\";\n    const initialPos = (parseInt(initialTilePos) + 7) + \"%\";\n\n    // images would not load link with a path\n    const images = [preset, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O];\n\n    useEffect( () => {\n        atBottom();\n    }, [bottom])\n\n    useEffect( () => {\n        if (blockRef != null) {\n            lateralMovement();\n        }\n    }, [])\n\n    useEffect( () => {\n        changeBlock();\n    }, [nftChange])\n\n    // changes the block skin\n    const changeBlock = () => {\n        console.log(\"change block\");\n        const tokenId = localStorage.getItem(\"current block\");\n        newImage = images[tokenId];\n        blockRef.current.firstChild.src = newImage;\n    }\n\n    // will check if block landed on a tile \n    // if it does land on a tile it will call jump\n    // if it does not it will just fall and end the game\n    const atBottom = () => {\n        let blockPos = parseInt(blockRef.current.style.left);\n        if(bottom) {\n            // measurements are considering size of block\n            if (firstTilePos - 12 < blockPos && blockPos < firstTilePos + 5){\n                setScore(1+score);\n                jump();\n            }\n            else {\n                // responsible for moving the block down if the tile is missed\n                let currentHeight = height;\n                const timerDown = setInterval(downFrame, 50);\n                function downFrame() {\n                    // when the tile hits the floor\n                    if (currentHeight <= 25){\n                        clearInterval(timerDown);\n                        setHeight(currentHeight);\n                        setBottom(true);\n                        setEnded(true);\n                    }\n                    // moving the tile down \n                    else {\n                        currentHeight -= 5;\n                        pixelHeight = currentHeight + \"px\"\n                        blockRef.current.style.bottom = pixelHeight;\n                    }\n                }\n                    \n            }\n        }\n    }\n\n    // when an left or right arrow is pressed it will call a function to move either left or right\n    // this function will go loop on until another key is pressed\n    const lateralMovement = () => {\n        let timerRight;\n        let timerLeft;\n        let keydown = false;\n        // listens for key down\n        document.addEventListener(\"keydown\", (event) => {\n            event.preventDefault();\n            if (keydown) {\n                // stops any movement if the block is already moving\n                clearInterval(timerRight);\n                clearInterval(timerLeft);\n                keydown = false;\n            }\n            else if (blockRef.current.style !== null) {\n                // if the block is not moving\n                keydown = true;\n                // checks if the key is the right key\n                if (event.keyCode === 39){\n                    timerRight = setInterval(moveRight, 10);\n                    function moveRight() {\n                        console.log(blockRef.current.style);\n                        console.log(blockRef.current);\n                        if (parseInt(blockRef.current.style.left) <= 87){\n                            blockRef.current.style.left = (parseInt(blockRef.current.style.left) + 1) + \"%\";\n                        }\n                        else {\n                            clearInterval(timerRight);\n                            keydown = false;\n                        }\n                    }\n                }\n                // checks if the key is the left key\n                if (event.keyCode === 37) {\n                    timerLeft = setInterval(moveLeft, 10);\n                    function moveLeft() {\n                        if (parseInt(blockRef.current.style.left) >= 1){\n                            blockRef.current.style.left = (parseInt(blockRef.current.style.left) - 1) + \"%\";\n                        }\n                        else {\n                            clearInterval(timerLeft);\n                            keydown = false;\n                        }\n                    }\n                }\n            }\n        })\n    }\n\n    // will only be called when block is at bottom\n    const jump = () => {\n        setBottom(false);\n        const jumpHeight = 130;\n        let currentHeight = height;\n        const startingHeight = height;\n        const timerUp = setInterval(jumpFrame, 50);\n        function jumpFrame() {\n            if (currentHeight - startingHeight >= jumpHeight) {\n                clearInterval(timerUp);\n                setHeight(currentHeight);\n                down();\n            }\n            else{\n                currentHeight += 10;\n                pixelHeight = currentHeight + \"px\"\n                blockRef.current.style.bottom = pixelHeight;\n            }\n        }\n        \n        // will be called when jump reaches jumpHeight\n        // this function will only bring the block until the bottom tile\n        const down = () => {\n            const timerDown = setInterval(downFrame, 50);\n            function downFrame() {\n                if (currentHeight <= 100){\n                    clearInterval(timerDown);\n                    setHeight(currentHeight);\n                    setBottom(true);\n                }\n                else {\n                    currentHeight -= 10;\n                    pixelHeight = currentHeight + \"px\"\n                    blockRef.current.style.bottom = pixelHeight;\n                }\n            }\n        }\n    }\n\n    return (\n        <div ref={blockRef} className=\"block\" onClick={() => {jump()}} style={{bottom: pixelHeight, left: initialPos}}>\n            <img className='blockPic' src={preset}></img>\n        </div>\n    )\n\n}\n\nexport default Block;",[],"/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/components/TileFrame.js",["62","63"],[],"import React, {useEffect, useRef, useState} from 'react';\nimport Tile from './Tile.js';\nimport '../css/stylesheet.css';\n\nconst TileFrame = ({bottom, setInitialTilePos, setFirstTilePos}) => {\n\n    // these are refs to the tiles \n    // first is the bottom tile, second is the second bottom tile, and so on...\n    const fourth = useRef();\n    const third = useRef();\n    const second = useRef();\n    const first = useRef();\n\n    useEffect( () => {\n\n        // retrieves the styles for each tile\n        const fourthStyle = fourth.current.getStyle();\n        const thirdStyle = third.current.getStyle();\n        const secondStyle = second.current.getStyle();\n        const firstStyle = first.current.getStyle();\n\n        // set the hieght of the initial tiles\n        fourthStyle.bottom = \"531px\";\n        fourthStyle.left = (Math.random() * 80) + \"%\";\n        thirdStyle.bottom = \"384px\";\n        thirdStyle.left = (Math.random() * 80) + \"%\";\n        secondStyle.bottom = \"237px\";\n        secondStyle.left = (Math.random() * 80) + \"%\";\n        firstStyle.bottom = \"90px\";\n        firstStyle.left = (Math.random() * 80) + \"%\";\n        \n        setInitialTilePos(parseInt(secondStyle.left));\n        setFirstTilePos(parseInt(secondStyle.left));\n    }, []);\n\n    useEffect( () => {\n        if (!bottom) {\n            // checks which tile is the bottom tile\n            // if it is then it will be moved to the top\n            fourth.current.isBottom();\n            third.current.isBottom();\n            second.current.isBottom();\n            first.current.isBottom();\n\n            const initialize = () => {\n                fourth.current.moveDown();\n                third.current.moveDown();\n                second.current.moveDown();\n                first.current.moveDown();\n            }\n            initialize();\n        }\n    }, [bottom])\n\n    return (\n        <div className=\"tileframe\">\n            <Tile className=\"tile\" ref={fourth} style={{bottom: '531px', left: (Math.random() * 80) + \"%\"}} setFirstTilePos={setFirstTilePos}/>\n            <Tile className=\"tile\" ref={third} style={{bottom: '384px', left: (Math.random() * 80) + \"%\"}} setFirstTilePos={setFirstTilePos}/>\n            <Tile className=\"tile\" ref={second} style={{bottom: '237px', left: (Math.random() * 80) + \"%\"}} setFirstTilePos={setFirstTilePos}/>\n            <Tile className=\"tile\" ref={first} style={{bottom: '90px', left: (Math.random() * 80) + \"%\"}} setFirstTilePos={setFirstTilePos}/>\n        </div>\n    )\n}\n\nexport default TileFrame;\n","/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/components/Tile.js",[],[],"/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/components/Score.js",["64","65","66","67"],[],"import { FixedNumber } from 'ethers';\nimport React, { useEffect, useState, useRef } from 'react';\nimport factory from '../blockchain/factory.js';\nimport { ethers } from 'ethers';\nimport '../css/stylesheet.css';\nimport Swal from 'sweetalert2';\n\nconst Score = ({connected, setHighScore, setWorldHighScore, setWorldHighScoreHolder, gameContract, highScore, worldHighScore, worldHighScoreHolder, setScore, setEnded, setHeight, setBottom, score, ended, setNftPage, bottom}) => {\n\n    useEffect( () => {\n    }, [highScore])\n\n    \n    useEffect(() => {\n        if (ended && connected) {\n            updateScores();\n        }\n    }, [score, ended])\n\n    const updateScores = async() => {\n        // User has beaten the Highscore and World Highscore\n        if (score > highScore && score > worldHighScore) {\n            Swal.fire({\n                title: \"Congratulations you've beaten your Highscore and the World Highscore\\nWould you like to update the Highscore and World Highscore?\",\n                showCancelButton: true,\n                confirmButtonText: \"Obviously\",\n            }).then((result) => {\n                if (result.isConfirmed) {\n                    logic1();\n                }\n                else {\n                    Swal.fire({\n                        title: \"Weird decision, but do you at least want to update your own Highscore?\",\n                        showCancelButton: true,\n                        confirmButtonText: \"Sure\",\n                    }).then((result) => {\n                        if (result.isConfirmed) {\n                            logic2();\n                        }\n                    })\n                }\n            })\n        }\n        // User has only beaten the World Highscore\n        else if (score > worldHighScore) {\n            Swal.fire({\n                title: \"Congratulations you've betten the World Highscore\\nWould you like to update the World Highscore?\",\n                showCancelButton: true,\n                confirmButtonText: \"Sure\",\n            }).then((result) => {\n                if (result.isConfirmed) {\n                    logic3();\n                }\n            })\n        }\n        // User has beaten their Highscore\n        else if (score > highScore) {\n            Swal.fire({\n                title: \"Congratulations on your new Highscore!\\nWould you like to update your Highscore?\",\n                showCancelButton: true,\n                confirmButtonText: \"Sure\",\n            }).then((result) => {\n                if (result.isConfirmed) {\n                    logic4();\n                }\n            })\n        }\n\n        const logic1 = async() => {\n            const tx1 = await gameContract.setNewHighScore(ethers.BigNumber.from(score));\n            const tx2 = await factory.updateHighScore(ethers.BigNumber.from(score));\n            await tx1.wait();\n            const tempHighScore = await gameContract.highScore();\n            setHighScore(ethers.BigNumber.from(tempHighScore).toNumber());\n            await tx2.wait();\n            const tempWorldHighScore = await factory.worldHighScore();\n            setWorldHighScore(ethers.BigNumber.from(tempWorldHighScore).toNumber());\n            const tempWorldHighScoreHolder = await factory.worldHighScoreHolder()\n            setWorldHighScoreHolder(ethers.BigNumber.from(tempWorldHighScoreHolder).toHexString());\n        }\n\n        const logic2 = async() => {\n            const tx = await gameContract.setNewHighScore(ethers.BigNumber.from(score));\n            await tx.wait();\n            const tempHighScore = await gameContract.highScore();\n            setHighScore(ethers.BigNumber.from(tempHighScore).toNumber());\n        }\n\n        const logic3 = async() => {\n            const tx = await factory.updateHighScore(ethers.BigNumber.from(score));\n            await tx.wait();\n            const tempWorldHighScore = await factory.worldHighScore();\n            setWorldHighScore(ethers.BigNumber.from(tempWorldHighScore).toNumber());\n            const tempWorldHighScoreHolder = await factory.worldHighScoreHolder()\n            setWorldHighScoreHolder(ethers.BigNumber.from(tempWorldHighScoreHolder).toHexString());            \n        }\n\n        const logic4 = async() => {\n            const tx = await gameContract.setNewHighScore(ethers.BigNumber.from(score));\n            await tx.wait();\n            const tempHighScore = await gameContract.highScore();\n            setHighScore(ethers.BigNumber.from(tempHighScore).toNumber());\n        }\n    }\n    \n    // User is playing the game\n    if (!ended){\n        return (\n            <>\n                <div className=\"highscore_div\">\n                    High Score {highScore}\n                </div>\n                <div className=\"worldhighscore_div\">\n                    World High Score {worldHighScore}\n                </div>\n                <div className=\"score_div\">\n                    {score}\n                </div>\n            </>\n        )\n    }\n    // Player just started the game\n    else if (bottom) {\n        return(\n            <>  \n                <div className=\"highscore_div\">\n                    High Score {highScore}\n                </div>\n                <div className=\"worldhighscore_div\">\n                    World High Score {worldHighScore} \n                </div>\n                <div className=\"worldhighscoreholder_div\">\n                    World High Score Holder\n                    <br/>{worldHighScoreHolder}\n                </div>\n                <div className=\"score_div\">\n                    {score}\n                </div>\n                <div className=\"gameover\">\n                    You're Trash\n                </div>\n                <button type=\"button\" className=\"nft_button\" onClick={ event => {\n                    event.preventDefault();\n                    setNftPage(true);\n                }}>\n                   Get NFT!\n                </button>\n                <button type=\"button\" className=\"play_again_button1\" onClick={ event => {\n                    event.preventDefault();\n                    setScore(0);\n                    setEnded(false);\n                    setHeight(100);\n                    setBottom(false);\n                }}>\n                   Play\n                </button>\n            </>\n        )\n    }\n    // Player has just lost the game\n    else {\n        return(\n            <>  \n                <div className=\"highscore_div\">\n                    High Score {highScore}\n                </div>\n                <div className=\"worldhighscore_div\">\n                    World High Score {worldHighScore}\n                </div>\n                <div className=\"worldhighscoreholder_div\">\n                    World High Score Holder\n                    <br/>{worldHighScoreHolder}            \n                </div>\n                <div className=\"score_div\">\n                    {score}\n                </div>\n                <button type=\"button\" className=\"nft_button\" onClick={ event => {\n                    event.preventDefault();\n                    const delay1 = setTimeout(changeNftPage1, 800);\n                    function changeNftPage1() {\n                        setNftPage(true);\n                        clearInterval(delay1);\n                    };\n                }}>\n                   Get NFT!\n                </button>\n                <button type=\"button\" className=\"play_again_button1\" onClick={ event => {\n                    event.preventDefault();\n                    setScore(0);\n                    setEnded(false);\n                    setHeight(100);\n                    setBottom(false);\n                }}>\n                   Play\n                </button>\n            </>\n        )\n    }\n}\n\nexport default Score;","/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/components/NftPage.js",["68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85"],[],"import React, {useEffect, useRef, useState} from 'react';\nimport {ethers} from 'ethers';\nimport A from '../MetaData/Images/1.png';\nimport B from '../MetaData/Images/2.png';\nimport C from '../MetaData/Images/3.png';\nimport D from '../MetaData/Images/4.png';\nimport E from '../MetaData/Images/5.png';\nimport F from '../MetaData/Images/6.png';\nimport G from '../MetaData/Images/7.png';\nimport H from '../MetaData/Images/8.png';\nimport I from '../MetaData/Images/9.png';\nimport J from '../MetaData/Images/10.png';\nimport K from '../MetaData/Images/11.png';\nimport L from '../MetaData/Images/12.png';\nimport M from '../MetaData/Images/13.png';\nimport N from '../MetaData/Images/14.png';\nimport O from '../MetaData/Images/15.gif';\nimport Swal from 'sweetalert2';\nimport '../css/stylesheet.css';\n\nconst NftPage = ({setNftPage, gameContract, setNftChange, nftChange, highScore}) => {\n\n    // Writes I'm free over currently used NFT\n    useEffect( () => {\n        const currentTokenId = localStorage.getItem(\"current block\");\n        if (currentTokenId > 0) {\n            const currentBlockElement = document.getElementById(currentTokenId).parentElement.firstChild;\n            currentBlockElement.firstChild.innerHTML = \"I'm Free\";\n        }\n    }, [])\n\n    // Writes I'm free over newly chosen NFT and writes Free Me over previous NFT\n    const noteCurrentBlock = (previousTokenId) => {\n        if (previousTokenId > 0){\n            const previousBlockElement = document.getElementById(previousTokenId).parentElement.firstChild;\n            previousBlockElement.firstChild.innerHTML = \"Free Me!!\";\n\n        }\n        const currentTokenId = localStorage.getItem(\"current block\");\n        if (currentTokenId > 0){\n            const currentBlockElement = document.getElementById(currentTokenId).parentElement.firstChild;\n            currentBlockElement.firstChild.innerHTML = \"I'm Free\";\n        }\n    }\n\n    const equipeOrMint = async(e) => {\n        e.preventDefault();\n        const tokenId = e.target.id;\n        const tokenScore = tokenId * 10;\n        let owner;\n        const CID = 'QmbEvMM5x3rQuXgcAgkBJUaFPRHv7DyDnMbVxR3xkAhWPA';\n        const tokenURI = `https://ipfs.io/ipfs/${CID}/${tokenId}.json`;\n        try {\n            await gameContract.ownerOf(ethers.BigNumber.from(tokenId));\n            owner = true;\n        } catch {\n            owner = false;\n        }\n        const previousTokenId = localStorage.getItem(\"current block\");;\n        if (owner) {\n            // If you click on the NFT you already own you revert to using the original NFT block\n            if (previousTokenId == tokenId) {\n                localStorage.setItem(\"current block\", 0);\n            }\n            else {\n                localStorage.setItem(\"current block\", tokenId);\n                noteCurrentBlock(previousTokenId);\n            }\n            setNftChange(!nftChange);\n        }\n        // If you do have a high enough score to choose this NFT\n        // You will have the option to mint the NFT\n        else if (highScore > tokenScore) {\n            Swal.fire({\n                title: 'Congrats dog would you like to mint this sick NFT?',\n                showCancelButton: true,\n                confirmButtonText: 'Duh',\n              }).then((result) => {\n                mintNftResponse(result);\n              })\n        }\n        // If user doens't have a high enough score\n        else {\n            Swal.fire({\n                title: 'Weakling',\n                text: `Your high score must be at least ${tokenScore} to mint this NFT`,\n                icon: 'info',\n            })\n            noteCurrentBlock(previousTokenId);\n        }\n\n        // Mints the NFT\n        const mintNftResponse = async (result) => {\n            if (result.isConfirmed) {\n                const tx = await gameContract.mint(tokenURI, tokenId);\n                localStorage.setItem(\"current block\", tokenId);\n                await tx.wait();\n                noteCurrentBlock(previousTokenId);\n                setNftChange(!nftChange);\n            }\n        }\n    }\n\n    // Individually list all NFTs\n    // Could be done in a list like my Todo App\n    return (\n        <>\n            <div className=\"titleButtons\">\n                <button className=\"ui green icon button\" style={{margin: \"10px\", marginTop: \"4px\"}}\n                onClick={e => {\n                    window.location.reload(false);\n                    setNftPage(false);\n                }}>\n                    <i className=\"reply icon\"></i>\n                </button>\n                <button className=\"ui green basic button\" style={{width: \"400px\", fontSize: \"20px\", marginTop: \"20px\"}}>\n                    Choose Your Block\n                </button>\n            </div>\n            <div className=\"ui three column grid\">\n                <div className=\"three column centered row\">\n                    <div className=\"column\">\n                        <button className=\"ui green basic button\" id=\"1\" onClick={e => {equipeOrMint(e)}}>\n                            <p style={{color: \"lawngreen\", marginTop: \"3px\", fontSize: \"13px\"}}>Free Me!!</p> \n                            <img src={A} id={1}></img>\n                        </button>\n                    </div>\n                    <div className=\"column\">\n                        <button className=\"ui green basic button\" id=\"2\" onClick={e => {equipeOrMint(e)}}>\n                            <p style={{color: \"lawngreen\", marginTop: \"3px\", fontSize: \"13px\"}}>Free Me!!</p> \n                            <img src={B} id={2}></img>\n                        </button>\n                    </div>\n                    <div className=\"column\">\n                        <button className=\"ui green basic button\" id=\"3\" onClick={e => {equipeOrMint(e)}}>\n                            <p style={{color: \"lawngreen\", marginTop: \"3px\", fontSize: \"13px\"}}>Free Me!!</p> \n                            <img src={C} id={3}></img>\n                        </button>\n\n                    </div>\n                </div>\n                <div className=\"three column centered row\">\n                    <div className=\"column\">\n                        <button className=\"ui green basic button\"  id=\"4\" onClick={e => {equipeOrMint(e)}}>\n                            <p style={{color: \"lawngreen\", marginTop: \"3px\", fontSize: \"13px\"}}>Free Me!!</p> \n                            <img src={D} id={4}></img>\n                        </button>\n                    </div>\n                    <div className=\"column\">\n                        <button className=\"ui green basic button\" id=\"5\" onClick={e => {equipeOrMint(e)}}>\n                            <p style={{color: \"lawngreen\", marginTop: \"3px\", fontSize: \"13px\"}}>Free Me!!</p> \n                            <img src={E} id={5}></img>\n                        </button>\n                    </div>\n                    <div className=\"column\">\n                        <button className=\"ui green basic button\" id=\"6\" onClick={e => {equipeOrMint(e)}}>\n                            <p style={{color: \"lawngreen\", marginTop: \"3px\", fontSize: \"13px\"}}>Free Me!!</p>   \n                            <img src={F} id={6}></img>\n                        </button>\n                    </div>\n                </div>\n                <div className=\"three column centered row\">\n                    <div className=\"column\">\n                        <button className=\"ui green basic button\" id=\"7\" onClick={e => {equipeOrMint(e)}}>\n                            <p style={{color: \"lawngreen\", marginTop: \"3px\", fontSize: \"13px\"}}>Free Me!!</p> \n                            <img src={G} id={7}></img>\n                        </button>\n                    </div>\n                    <div className=\"column\">\n                        <button className=\"ui green basic button\" id=\"8\" onClick={e => {equipeOrMint(e)}}>\n                            <p style={{color: \"lawngreen\", marginTop: \"3px\", fontSize: \"13px\"}}>Free Me!!</p> \n                            <img src={H} id={8}></img>\n                        </button>\n                    </div>\n                    <div className=\"column\">\n                        <button className=\"ui green basic button\" id=\"9\" onClick={e => {equipeOrMint(e)}}>\n                            <p style={{color: \"lawngreen\", marginTop: \"3px\", fontSize: \"13px\"}}>Free Me!!</p> \n                            <img src={I} id={9}></img>\n                        </button>\n                    </div>\n                </div>\n                <div className=\"three column centered row\">\n                    <div className=\"column\">\n                        <button className=\"ui green basic button\" id=\"10\" onClick={e => {equipeOrMint(e)}}>\n                            <p style={{color: \"lawngreen\", marginTop: \"3px\", fontSize: \"13px\"}}>Free Me!!</p> \n                            <img src={J} id={10}></img>\n                        </button>\n                    </div>\n                    <div className=\"column\">\n                        <button className=\"ui green basic button\" id=\"11\" onClick={e => {equipeOrMint(e)}}>\n                            <p style={{color: \"lawngreen\", marginTop: \"3px\", fontSize: \"13px\"}}>Free Me!!</p> \n                            <img src={K} id={11}></img>\n                        </button>\n                    </div>\n                    <div className=\"column\">\n                        <button className=\"ui green basic button\" id=\"12\" onClick={e => {equipeOrMint(e)}}>\n                            <p style={{color: \"lawngreen\", marginTop: \"3px\", fontSize: \"13px\"}}>Free Me!!</p>   \n                            <img src={L} id={12}></img>\n                        </button>\n                    </div>\n                </div>\n                <div className=\"three column centered row\">\n                    <div className=\"column\">\n                        <button className=\"ui green basic button\" id=\"13\" onClick={e => {equipeOrMint(e)}}>\n                            <p style={{color: \"lawngreen\", marginTop: \"3px\", fontSize: \"13px\"}}>Free Me!!</p> \n                            <img src={M} id={13}></img>\n                        </button>\n                    </div>\n                    <div className=\"column\">\n                        <button className=\"ui green basic button\" id=\"14\" onClick={e => {equipeOrMint(e)}}>\n                            <p style={{color: \"lawngreen\", marginTop: \"3px\", fontSize: \"13px\"}}>Free Me!!</p> \n                            <img src={N} id={14}></img>\n                        </button>\n                    </div>\n                    <div className=\"column\">\n                        <button className=\"ui green basic button\" id=\"15\" onClick={e => {equipeOrMint(e)}}>\n                            <p style={{color: \"lawngreen\", marginTop: \"3px\", fontSize: \"13px\"}}>Free Me!!</p> \n                            <img src={O} id={15}></img>\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div>\n\n            </div>\n        </>\n    );\n\n}\n\nexport default NftPage;","/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/blockchain/factory.js",[],[],[],"/Users/erikmacinnis/Desktop/BlockChainProjects/jumping_game/src/blockchain/ethers.js",[],[],{"ruleId":"86","severity":1,"message":"87","line":46,"column":8,"nodeType":"88","endLine":46,"endColumn":19,"suggestions":"89"},{"ruleId":"86","severity":1,"message":"90","line":51,"column":8,"nodeType":"88","endLine":51,"endColumn":10,"suggestions":"91"},{"ruleId":"86","severity":1,"message":"92","line":70,"column":8,"nodeType":"88","endLine":70,"endColumn":10,"suggestions":"93"},{"ruleId":"94","severity":1,"message":"95","line":115,"column":81,"nodeType":"96","messageId":"97","endLine":115,"endColumn":83},{"ruleId":"98","severity":1,"message":"99","line":1,"column":35,"nodeType":"100","messageId":"101","endLine":1,"endColumn":43},{"ruleId":"86","severity":1,"message":"102","line":32,"column":8,"nodeType":"88","endLine":32,"endColumn":16,"suggestions":"103"},{"ruleId":"86","severity":1,"message":"104","line":42,"column":8,"nodeType":"88","endLine":42,"endColumn":19,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":178,"column":13,"nodeType":"108","endLine":178,"endColumn":52},{"ruleId":"98","severity":1,"message":"99","line":1,"column":35,"nodeType":"100","messageId":"101","endLine":1,"endColumn":43},{"ruleId":"86","severity":1,"message":"109","line":34,"column":8,"nodeType":"88","endLine":34,"endColumn":10,"suggestions":"110"},{"ruleId":"98","severity":1,"message":"111","line":1,"column":10,"nodeType":"100","messageId":"101","endLine":1,"endColumn":21},{"ruleId":"98","severity":1,"message":"99","line":2,"column":28,"nodeType":"100","messageId":"101","endLine":2,"endColumn":36},{"ruleId":"98","severity":1,"message":"112","line":2,"column":38,"nodeType":"100","messageId":"101","endLine":2,"endColumn":44},{"ruleId":"86","severity":1,"message":"113","line":18,"column":8,"nodeType":"88","endLine":18,"endColumn":22,"suggestions":"114"},{"ruleId":"98","severity":1,"message":"112","line":1,"column":27,"nodeType":"100","messageId":"101","endLine":1,"endColumn":33},{"ruleId":"98","severity":1,"message":"99","line":1,"column":35,"nodeType":"100","messageId":"101","endLine":1,"endColumn":43},{"ruleId":"94","severity":1,"message":"95","line":62,"column":33,"nodeType":"96","messageId":"97","endLine":62,"endColumn":35},{"ruleId":"106","severity":1,"message":"107","line":125,"column":29,"nodeType":"108","endLine":125,"endColumn":49},{"ruleId":"106","severity":1,"message":"107","line":131,"column":29,"nodeType":"108","endLine":131,"endColumn":49},{"ruleId":"106","severity":1,"message":"107","line":137,"column":29,"nodeType":"108","endLine":137,"endColumn":49},{"ruleId":"106","severity":1,"message":"107","line":146,"column":29,"nodeType":"108","endLine":146,"endColumn":49},{"ruleId":"106","severity":1,"message":"107","line":152,"column":29,"nodeType":"108","endLine":152,"endColumn":49},{"ruleId":"106","severity":1,"message":"107","line":158,"column":29,"nodeType":"108","endLine":158,"endColumn":49},{"ruleId":"106","severity":1,"message":"107","line":166,"column":29,"nodeType":"108","endLine":166,"endColumn":49},{"ruleId":"106","severity":1,"message":"107","line":172,"column":29,"nodeType":"108","endLine":172,"endColumn":49},{"ruleId":"106","severity":1,"message":"107","line":178,"column":29,"nodeType":"108","endLine":178,"endColumn":49},{"ruleId":"106","severity":1,"message":"107","line":186,"column":29,"nodeType":"108","endLine":186,"endColumn":50},{"ruleId":"106","severity":1,"message":"107","line":192,"column":29,"nodeType":"108","endLine":192,"endColumn":50},{"ruleId":"106","severity":1,"message":"107","line":198,"column":29,"nodeType":"108","endLine":198,"endColumn":50},{"ruleId":"106","severity":1,"message":"107","line":206,"column":29,"nodeType":"108","endLine":206,"endColumn":50},{"ruleId":"106","severity":1,"message":"107","line":212,"column":29,"nodeType":"108","endLine":212,"endColumn":50},{"ruleId":"106","severity":1,"message":"107","line":218,"column":29,"nodeType":"108","endLine":218,"endColumn":50},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'loadGame' and 'score'. Either include them or remove the dependency array.","ArrayExpression",["115"],"React Hook useEffect has a missing dependency: 'loadGame'. Either include it or remove the dependency array.",["116"],"React Hook useEffect has a missing dependency: 'detectAccountChange'. Either include it or remove the dependency array.",["117"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'atBottom'. Either include it or remove the dependency array.",["118"],"React Hook useEffect has a missing dependency: 'changeBlock'. Either include it or remove the dependency array.",["119"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'setFirstTilePos' and 'setInitialTilePos'. Either include them or remove the dependency array. If 'setInitialTilePos' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["120"],"'FixedNumber' is defined but never used.","'useRef' is defined but never used.","React Hook useEffect has missing dependencies: 'connected' and 'updateScores'. Either include them or remove the dependency array.",["121"],{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},"Update the dependencies array to be: [highScore, loadGame, score]",{"range":"136","text":"137"},"Update the dependencies array to be: [loadGame]",{"range":"138","text":"139"},"Update the dependencies array to be: [detectAccountChange]",{"range":"140","text":"141"},"Update the dependencies array to be: [atBottom, bottom]",{"range":"142","text":"143"},"Update the dependencies array to be: [changeBlock, nftChange]",{"range":"144","text":"145"},"Update the dependencies array to be: [setFirstTilePos, setInitialTilePos]",{"range":"146","text":"147"},"Update the dependencies array to be: [score, ended, connected, updateScores]",{"range":"148","text":"149"},[1765,1776],"[highScore, loadGame, score]",[1860,1862],"[loadGame]",[2240,2242],"[detectAccountChange]",[1234,1242],"[atBottom, bottom]",[1406,1417],"[changeBlock, nftChange]",[1248,1250],"[setFirstTilePos, setInitialTilePos]",[625,639],"[score, ended, connected, updateScores]"]